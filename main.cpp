/*
  TO FILL IN LATER
    Sketch title

    The circuit:
    * Adafruit Feather M4
  * Adafruit NeoPxl8 M4 Featherwing (probably not anymore)
  * Wiring harness to breadboard
  * 5V 10A power supply and NeoPxl8 data to light fronts 

    Last modified 17 April 22
    Gabe, Kevin, Lucas, Neev, Owen, Quinn, and Rishy
  Ms. Hill's B5 Algebra 2, 2021-22

  https://github.com/t-ebag/Rubiks-Cube-Project

*/

// Number of LEDs per side
#define LEDS_PER_FACE 324
// Number of LEDs per panel
#define LEDS_PER_PANEL 36

// Pins for each of the faces
#define F_FACE_PIN 5
#define R_FACE_PIN 6
#define U_FACE_PIN 9
#define L_FACE_PIN 10
#define B_FACE_PIN 11
#define D_FACE_PIN 12

// Import libraries
// #include <Adafruit_NeoPXL8.h> Not using neopxl8
// #include <Adafruit_GFX.h>
// #include <Adafruit_NeoMatrix.h>
#include <Adafruit_NeoPixel.h>

// int8_t pins[8] = { PIN_SERIAL1_RX, PIN_SERIAL1_TX, MISO, 13, 5, SDA, A4, A3 }; not using neopxl8

// Create and initialize front object
// Adafruit_NeoPXL8 front(NUM_LED, pins, NEO_GRB); not using neopxl8

Adafruit_NeoPixel front(324, F_FACE_PIN);
Adafruit_NeoPixel right(324, R_FACE_PIN);
Adafruit_NeoPixel up(324, U_FACE_PIN);
Adafruit_NeoPixel left(324, L_FACE_PIN);
Adafruit_NeoPixel back(324, B_FACE_PIN);
Adafruit_NeoPixel down(324, D_FACE_PIN);



// Define color values
// **To be filled in later with Art Team**

uint32_t RED = front.Color(255, 0, 0);
uint32_t GREEN = front.Color(0, 255, 0);
uint32_t BLUE = front.Color(0, 0, 255);
uint32_t WHITE = front.Color(255, 255, 200);
uint32_t ORANGE = front.Color(255, 40, 0);
uint32_t YELLOW = front.Color(255, 80, 0);


char animationClockwise[17][324] = { // 17 frames, 324 characters each 

    { // Frame 1
        1,1,1,1,1,1,  2,2,2,2,2,2,  3,3,3,3,3,3,
        1,1,1,1,1,1,  2,2,2,2,2,2,  3,3,3,3,3,3,
        1,1,1,1,1,1,  2,2,2,2,2,2,  3,3,3,3,3,3,
        1,1,1,1,1,1,  2,2,2,2,2,2,  3,3,3,3,3,3,
        1,1,1,1,1,1,  2,2,2,2,2,2,  3,3,3,3,3,3,
        1,1,1,1,1,1,  2,2,2,2,2,2,  3,3,3,3,3,3,
        
        4,4,4,4,4,4,  5,5,5,5,5,5,  6,6,6,6,6,6,
        4,4,4,4,4,4,  5,5,5,5,5,5,  6,6,6,6,6,6,
        4,4,4,4,4,4,  5,5,5,5,5,5,  6,6,6,6,6,6,
        4,4,4,4,4,4,  5,5,5,5,5,5,  6,6,6,6,6,6,
        4,4,4,4,4,4,  5,5,5,5,5,5,  6,6,6,6,6,6,
        4,4,4,4,4,4,  5,5,5,5,5,5,  6,6,6,6,6,6,
        
        7,7,7,7,7,7,  8,8,8,8,8,8,  9,9,9,9,9,9,
        7,7,7,7,7,7,  8,8,8,8,8,8,  9,9,9,9,9,9,
        7,7,7,7,7,7,  8,8,8,8,8,8,  9,9,9,9,9,9,
        7,7,7,7,7,7,  8,8,8,8,8,8,  9,9,9,9,9,9,
        7,7,7,7,7,7,  8,8,8,8,8,8,  9,9,9,9,9,9,
        7,7,7,7,7,7,  8,8,8,8,8,8,  9,9,9,9,9,9
    },
    { // Frame 2
        1,1,1,1,1,1,  1,2,2,2,2,2,  2,3,3,3,3,3,
        1,1,1,1,1,1,  1,2,2,2,2,2,  2,3,3,3,3,3,
        1,1,1,1,1,1,  2,2,2,2,2,2,  3,3,3,3,3,3,
        1,1,1,1,1,1,  2,2,2,2,2,2,  3,3,3,3,3,3,
        1,1,1,1,1,1,  2,2,2,2,2,2,  3,3,3,3,3,3,
        4,4,1,1,1,1,  2,2,2,2,2,2,  3,3,3,3,3,3,
        
        4,4,4,4,4,4,  5,5,5,5,5,5,  6,6,6,6,3,3,
        4,4,4,4,4,4,  5,5,5,5,5,5,  6,6,6,6,6,6,
        4,4,4,4,4,4,  5,5,5,5,5,5,  6,6,6,6,6,6,
        4,4,4,4,4,4,  5,5,5,5,5,5,  6,6,6,6,6,6,
        4,4,4,4,4,4,  5,5,5,5,5,5,  6,6,6,6,6,6,
        7,7,4,4,4,4,  5,5,5,5,5,5,  6,6,6,6,6,6,
        
        7,7,7,7,7,7,  8,8,8,8,8,8,  9,9,9,9,6,6,
        7,7,7,7,7,7,  8,8,8,8,8,8,  9,9,9,9,9,9,
        7,7,7,7,7,7,  8,8,8,8,8,8,  9,9,9,9,9,9,
        7,7,7,7,7,7,  8,8,8,8,8,8,  9,9,9,9,9,9,
        7,7,7,7,7,8,  8,8,8,8,8,9,  9,9,9,9,9,9,
        7,7,7,7,7,8,  8,8,8,8,8,9,  9,9,9,9,9,9
    }
    { // Frame 3
        1,1,1,1,1,1,  1,1,2,2,2,2,  2,2,3,3,3,3,
        1,1,1,1,1,1,  1,1,2,2,2,2,  2,2,3,3,3,3,
        1,1,1,1,1,1,  1,2,2,2,2,2,  2,3,3,3,3,3,
        1,1,1,1,1,1,  1,2,2,2,2,2,  2,3,3,3,3,3,
        4,4,1,1,1,1,  2,2,2,2,2,2,  3,3,3,3,3,3,
        4,4,4,4,1,1,  2,2,2,2,2,2,  3,3,3,3,3,3,
        
        4,4,4,4,4,4,  5,5,5,5,5,5,  6,6,3,3,3,3,
        4,4,4,4,4,4,  5,5,5,5,5,5,  6,6,6,6,3,3,
        4,4,4,4,4,4,  5,5,5,5,5,5,  6,6,6,6,6,6,
        4,4,4,4,4,4,  5,5,5,5,5,5,  6,6,6,6,6,6,
        7,7,4,4,4,4,  5,5,5,5,5,5,  6,6,6,6,6,6,
        7,7,7,7,4,4,  5,5,5,5,5,5,  6,6,6,6,6,6,
        
        7,7,7,7,7,7,  8,8,8,8,8,8,  9,9,6,6,6,6,
        7,7,7,7,7,7,  8,8,8,8,8,8,  9,9,9,9,6,6,
        7,7,7,7,7,8,  8,8,8,8,8,9,  9,9,9,9,9,9,
        7,7,7,7,7,8,  8,8,8,8,8,9,  9,9,9,9,9,9,
        7,7,7,7,8,8,  8,8,8,8,9,9,  9,9,9,9,9,9,
        7,7,7,7,8,8,  8,8,8,8,9,9,  9,9,9,9,9,9
    }
    { // Frame 4
        1,1,1,1,1,1,  1,1,1,2,2,2,  2,2,2,3,3,3,
        1,1,1,1,1,1,  1,1,1,2,2,2,  2,2,2,3,3,3,
        1,1,1,1,1,1,  1,1,2,2,2,2,  2,2,3,3,3,3,
        4,4,1,1,1,1,  1,1,2,2,2,2,  2,2,3,3,3,3,
        4,4,4,4,1,1,  1,2,2,2,2,2,  2,3,3,3,3,3,
        4,4,4,4,4,4,  1,2,2,2,2,2,  2,3,3,3,3,3,
        
        4,4,4,4,4,4,  5,5,5,5,5,5,  3,3,3,3,3,3,
        4,4,4,4,4,4,  5,5,5,5,5,5,  6,6,3,3,3,3,
        4,4,4,4,4,4,  5,5,5,5,5,5,  6,6,6,6,3,3,
        7,7,4,4,4,4,  5,5,5,5,5,5,  6,6,6,6,6,6,
        7,7,7,7,4,4,  5,5,5,5,5,5,  6,6,6,6,6,6,
        7,7,7,7,7,7,  5,5,5,5,5,5,  6,6,6,6,6,6,
        
        7,7,7,7,7,8,  8,8,8,8,8,9,  6,6,6,6,6,6,
        7,7,7,7,7,8,  8,8,8,8,8,9,  9,9,6,6,6,6,
        7,7,7,7,8,8,  8,8,8,8,9,9,  9,9,9,9,6,6,
        7,7,7,7,8,8,  8,8,8,8,9,9,  9,9,9,9,9,9,
        7,7,7,8,8,8,  8,8,8,9,9,9,  9,9,9,9,9,9,
        7,7,7,8,8,8,  8,8,8,9,9,9,  9,9,9,9,9,9
    }
    { // Frame 5
        1,1,1,1,1,1,  1,1,1,1,2,2,  2,2,2,2,3,3,
        1,1,1,1,1,1,  1,1,1,1,2,2,  2,2,2,2,3,3,
        4,4,1,1,1,1,  1,1,1,2,2,2,  2,2,2,3,3,3,
        4,4,4,4,1,1,  1,1,1,2,2,2,  2,2,2,3,3,3,
        4,4,4,4,4,4,  1,1,2,2,2,2,  2,2,3,3,3,3,
        4,4,4,4,4,4,  1,1,2,2,2,2,  2,2,3,3,3,3,
        
        4,4,4,4,4,4,  5,5,5,5,5,5,  3,3,3,3,3,3,
        4,4,4,4,4,4,  5,5,5,5,5,5,  3,3,3,3,3,3,
        7,7,4,4,4,4,  5,5,5,5,5,5,  6,6,3,3,3,3,
        7,7,7,7,4,4,  5,5,5,5,5,5,  6,6,6,6,3,3,
        7,7,7,7,7,7,  5,5,5,5,5,5,  6,6,6,6,6,6,
        7,7,7,7,7,7,  5,5,5,5,5,5,  6,6,6,6,6,6,
        
        7,7,7,7,8,8,  8,8,8,8,9,9,  6,6,6,6,6,6,
        7,7,7,7,8,8,  8,8,8,8,9,9,  6,6,6,6,6,6,
        7,7,7,8,8,8,  8,8,8,9,9,9,  9,9,6,6,6,6,
        7,7,7,8,8,8,  8,8,8,9,9,9,  9,9,9,9,6,6,
        7,7,8,8,8,8,  8,8,9,9,9,9,  9,9,9,9,9,9,
        7,7,8,8,8,8,  8,8,9,9,9,9,  9,9,9,9,9,9
    }
    { // Frame 6
        1,1,1,1,1,1,  1,1,1,1,1,2,  2,2,2,2,2,3,
        4,4,1,1,1,1,  1,1,1,1,1,2,  2,2,2,2,2,3,
        4,4,4,4,1,1,  1,1,1,1,2,2,  2,2,2,2,3,3,
        4,4,4,4,4,4,  1,1,1,1,2,2,  2,2,2,2,3,3,
        4,4,4,4,4,4,  1,1,1,2,2,2,  2,2,2,3,3,3,
        4,4,4,4,4,4,  1,1,1,2,2,2,  2,2,2,3,3,3,
        
        4,4,4,4,4,4,  5,5,5,5,5,5,  3,3,3,3,3,3,
        7,7,4,4,4,4,  5,5,5,5,5,5,  3,3,3,3,3,3,
        7,7,7,7,4,4,  5,5,5,5,5,5,  3,3,3,3,3,3,
        7,7,7,7,7,7,  5,5,5,5,5,5,  6,6,3,3,3,3,
        7,7,7,7,7,7,  5,5,5,5,5,5,  6,6,6,6,3,3,
        7,7,7,7,7,7,  5,5,5,5,5,5,  6,6,6,6,6,6,
        
        7,7,7,8,8,8,  8,8,8,9,9,9,  6,6,6,6,6,6,
        7,7,7,8,8,8,  8,8,8,9,9,9,  6,6,6,6,6,6,
        7,7,8,8,8,8,  8,8,9,9,9,9,  6,6,6,6,6,6,
        7,7,8,8,8,8,  8,8,9,9,9,9,  9,9,6,6,6,6,
        7,8,8,8,8,8,  8,9,9,9,9,9,  9,9,9,9,6,6,
        7,8,8,8,8,8,  8,9,9,9,9,9,  9,9,9,9,9,9
    }
    { // Frame 7
        4,4,1,1,1,1,  1,1,1,1,1,1,  2,2,2,2,2,2,
        4,4,4,4,1,1,  1,1,1,1,1,1,  2,2,2,2,2,2,
        4,4,4,4,4,4,  1,1,1,1,1,2,  2,2,2,2,2,3,
        4,4,4,4,4,4,  1,1,1,1,1,2,  2,2,2,2,2,3,
        4,4,4,4,4,4,  1,1,1,1,2,2,  2,2,2,2,3,3,
        4,4,4,4,4,4,  1,1,1,1,2,2,  2,2,2,2,3,3,
        
        7,7,4,4,4,4,  5,5,5,5,5,5,  3,3,3,3,3,3,
        7,7,7,7,4,4,  5,5,5,5,5,5,  3,3,3,3,3,3,
        7,7,7,7,7,7,  5,5,5,5,5,5,  3,3,3,3,3,3,
        7,7,7,7,7,7,  5,5,5,5,5,5,  3,3,3,3,3,3,
        7,7,7,7,7,7,  5,5,5,5,5,5,  6,6,3,3,3,3,
        7,7,7,7,7,7,  5,5,5,5,5,5,  6,6,6,6,3,3,
        
        7,7,8,8,8,8,  8,8,9,9,9,9,  6,6,6,6,6,6,
        7,7,8,8,8,8,  8,8,9,9,9,9,  6,6,6,6,6,6,
        7,8,8,8,8,8,  8,9,9,9,9,9,  6,6,6,6,6,6,
        7,8,8,8,8,8,  8,9,9,9,9,9,  6,6,6,6,6,6,
        8,8,8,8,8,8,  9,9,9,9,9,9,  9,9,6,6,6,6,
        8,8,8,8,8,8,  9,9,9,9,9,9,  9,9,9,9,6,6
    }
    { // Frame 8
        4,4,4,4,1,1,  1,1,1,1,1,1,  2,2,2,2,2,2,
        4,4,4,4,4,4,  1,1,1,1,1,1,  2,2,2,2,2,2,
        4,4,4,4,4,4,  1,1,1,1,1,1,  2,2,2,2,2,2,
        4,4,4,4,4,4,  1,1,1,1,1,1,  2,2,2,2,2,2,
        4,4,4,4,4,4,  1,1,1,1,1,2,  2,2,2,2,2,3,
        4,4,4,4,4,4,  1,1,1,1,1,2,  2,2,2,2,2,3,
        
        7,7,7,7,4,4,  5,5,5,5,5,5,  3,3,3,3,3,3,
        7,7,7,7,7,7,  5,5,5,5,5,5,  3,3,3,3,3,3,
        7,7,7,7,7,7,  5,5,5,5,5,5,  3,3,3,3,3,3,
        7,7,7,7,7,7,  5,5,5,5,5,5,  3,3,3,3,3,3,
        7,7,7,7,7,7,  5,5,5,5,5,5,  3,3,3,3,3,3,
        7,7,7,7,7,7,  5,5,5,5,5,5,  6,6,3,3,3,3,
        
        7,8,8,8,8,8,  8,9,9,9,9,9,  6,6,6,6,6,6,
        7,8,8,8,8,8,  8,9,9,9,9,9,  6,6,6,6,6,6,
        8,8,8,8,8,8,  9,9,9,9,9,9,  6,6,6,6,6,6,
        8,8,8,8,8,8,  9,9,9,9,9,9,  6,6,6,6,6,6,
        8,8,8,8,8,8,  9,9,9,9,9,9,  6,6,6,6,6,6,
        8,8,8,8,8,8,  9,9,9,9,9,9,  9,9,6,6,6,6
    }
    { // Frame 9
        4,4,4,4,4,4,  1,1,1,1,1,1,  2,2,2,2,2,2,
        4,4,4,4,4,4,  1,1,1,1,1,1,  2,2,2,2,2,2,
        4,4,4,4,4,4,  1,1,1,1,1,1,  2,2,2,2,2,2,
        4,4,4,4,4,4,  1,1,1,1,1,1,  2,2,2,2,2,2,
        4,4,4,4,4,4,  1,1,1,1,1,1,  2,2,2,2,2,2,
        4,4,4,4,4,4,  1,1,1,1,1,1,  2,2,2,2,2,2,
        
        7,7,7,7,7,7,  5,5,5,5,5,5,  3,3,3,3,3,3,
        7,7,7,7,7,7,  5,5,5,5,5,5,  3,3,3,3,3,3,
        7,7,7,7,7,7,  5,5,5,5,5,5,  3,3,3,3,3,3,
        7,7,7,7,7,7,  5,5,5,5,5,5,  3,3,3,3,3,3,
        7,7,7,7,7,7,  5,5,5,5,5,5,  3,3,3,3,3,3,
        7,7,7,7,7,7,  5,5,5,5,5,5,  3,3,3,3,3,3,
        
        8,8,8,8,8,8,  9,9,9,9,9,9,  6,6,6,6,6,6,
        8,8,8,8,8,8,  9,9,9,9,9,9,  6,6,6,6,6,6,
        8,8,8,8,8,8,  9,9,9,9,9,9,  6,6,6,6,6,6,
        8,8,8,8,8,8,  9,9,9,9,9,9,  6,6,6,6,6,6,
        8,8,8,8,8,8,  9,9,9,9,9,9,  6,6,6,6,6,6,
        8,8,8,8,8,8,  9,9,9,9,9,9,  6,6,6,6,6,6
    }
    { // Frame 10
        4,4,4,4,4,4,  4,1,1,1,1,1,  1,2,2,2,2,2,
        4,4,4,4,4,4,  4,1,1,1,1,1,  1,2,2,2,2,2,
        4,4,4,4,4,4,  1,1,1,1,1,1,  2,2,2,2,2,2,
        4,4,4,4,4,4,  1,1,1,1,1,1,  2,2,2,2,2,2,
        4,4,4,4,4,4,  1,1,1,1,1,1,  2,2,2,2,2,2,
        7,7,4,4,4,4,  1,1,1,1,1,1,  2,2,2,2,2,2,
        
        7,7,7,7,7,7,  5,5,5,5,5,5,  3,3,3,3,2,2,
        7,7,7,7,7,7,  5,5,5,5,5,5,  3,3,3,3,3,3,
        7,7,7,7,7,7,  5,5,5,5,5,5,  3,3,3,3,3,3,
        7,7,7,7,7,7,  5,5,5,5,5,5,  3,3,3,3,3,3,
        7,7,7,7,7,7,  5,5,5,5,5,5,  3,3,3,3,3,3,
        8,8,7,7,7,7,  5,5,5,5,5,5,  3,3,3,3,3,3,
        
        8,8,8,8,8,8,  9,9,9,9,9,9,  6,6,6,6,3,3,
        8,8,8,8,8,8,  9,9,9,9,9,9,  6,6,6,6,6,6,
        8,8,8,8,8,8,  9,9,9,9,9,9,  6,6,6,6,6,6,
        8,8,8,8,8,8,  9,9,9,9,9,9,  6,6,6,6,6,6,
        8,8,8,8,8,9,  9,9,9,9,9,6,  6,6,6,6,6,6,
        8,8,8,8,8,9,  9,9,9,9,9,6,  6,6,6,6,6,6
    }
    { // Frame 11
        4,4,4,4,4,4,  4,4,1,1,1,1,  1,1,2,2,2,2,
        4,4,4,4,4,4,  4,4,1,1,1,1,  1,1,2,2,2,2,
        4,4,4,4,4,4,  4,1,1,1,1,1,  1,2,2,2,2,2,
        4,4,4,4,4,4,  4,1,1,1,1,1,  1,2,2,2,2,2,
        7,7,4,4,4,4,  1,1,1,1,1,1,  2,2,2,2,2,2,
        7,7,7,7,4,4,  1,1,1,1,1,1,  2,2,2,2,2,2,
        
        7,7,7,7,7,7,  5,5,5,5,5,5,  3,3,2,2,2,2,
        7,7,7,7,7,7,  5,5,5,5,5,5,  3,3,3,3,2,2,
        7,7,7,7,7,7,  5,5,5,5,5,5,  3,3,3,3,3,3,
        7,7,7,7,7,7,  5,5,5,5,5,5,  3,3,3,3,3,3,
        8,8,7,7,7,7,  5,5,5,5,5,5,  3,3,3,3,3,3,
        8,8,8,8,7,7,  5,5,5,5,5,5,  3,3,3,3,3,3,
        
        8,8,8,8,8,8,  9,9,9,9,9,9,  6,6,3,3,3,3,
        8,8,8,8,8,8,  9,9,9,9,9,9,  6,6,6,6,3,3,
        8,8,8,8,8,9,  9,9,9,9,9,6,  6,6,6,6,6,6,
        8,8,8,8,8,9,  9,9,9,9,9,6,  6,6,6,6,6,6,
        8,8,8,8,9,9,  9,9,9,9,6,6,  6,6,6,6,6,6,
        8,8,8,8,9,9,  9,9,9,9,6,6,  6,6,6,6,6,6
    }
    { // Frame 12
        4,4,4,4,4,4,  4,4,4,1,1,1,  1,1,1,2,2,2,
        4,4,4,4,4,4,  4,4,4,1,1,1,  1,1,1,2,2,2,
        4,4,4,4,4,4,  4,4,1,1,1,1,  1,1,2,2,2,2,
        7,7,4,4,4,4,  4,4,1,1,1,1,  1,1,2,2,2,2,
        7,7,7,7,4,4,  4,1,1,1,1,1,  1,2,2,2,2,2,
        7,7,7,7,7,7,  4,1,1,1,1,1,  1,2,2,2,2,2,
        
        7,7,7,7,7,7,  5,5,5,5,5,5,  2,2,2,2,2,2,
        7,7,7,7,7,7,  5,5,5,5,5,5,  3,3,2,2,2,2,
        7,7,7,7,7,7,  5,5,5,5,5,5,  3,3,3,3,2,2,
        8,8,7,7,7,7,  5,5,5,5,5,5,  3,3,3,3,3,3,
        8,8,8,8,7,7,  5,5,5,5,5,5,  3,3,3,3,3,3,
        8,8,8,8,8,8,  5,5,5,5,5,5,  3,3,3,3,3,3,
        
        8,8,8,8,8,9,  9,9,9,9,9,6,  3,3,3,3,3,3,
        8,8,8,8,8,9,  9,9,9,9,9,6,  6,6,3,3,3,3,
        8,8,8,8,9,9,  9,9,9,9,6,6,  6,6,6,6,3,3,
        8,8,8,8,9,9,  9,9,9,9,6,6,  6,6,6,6,6,6,
        8,8,8,9,9,9,  9,9,9,6,6,6,  6,6,6,6,6,6,
        8,8,8,9,9,9,  9,9,9,6,6,6,  6,6,6,6,6,6
    }
    { // Frame 13
        4,4,4,4,4,4,  4,4,4,4,1,1,  1,1,1,1,2,2,
        4,4,4,4,4,4,  4,4,4,4,1,1,  1,1,1,1,2,2,
        7,7,4,4,4,4,  4,4,4,1,1,1,  1,1,1,2,2,2,
        7,7,7,7,4,4,  4,4,4,1,1,1,  1,1,1,2,2,2,
        7,7,7,7,7,7,  4,4,1,1,1,1,  1,1,2,2,2,2,
        7,7,7,7,7,7,  4,4,1,1,1,1,  1,1,2,2,2,2,
        
        7,7,7,7,7,7,  5,5,5,5,5,5,  2,2,2,2,2,2,
        7,7,7,7,7,7,  5,5,5,5,5,5,  2,2,2,2,2,2,
        8,8,7,7,7,7,  5,5,5,5,5,5,  3,3,2,2,2,2,
        8,8,8,8,7,7,  5,5,5,5,5,5,  3,3,3,3,2,2,
        8,8,8,8,8,8,  5,5,5,5,5,5,  3,3,3,3,3,3,
        8,8,8,8,8,8,  5,5,5,5,5,5,  3,3,3,3,3,3,
        
        8,8,8,8,9,9,  9,9,9,9,6,6,  3,3,3,3,3,3,
        8,8,8,8,9,9,  9,9,9,9,6,6,  3,3,3,3,3,3,
        8,8,8,9,9,9,  9,9,9,6,6,6,  6,6,3,3,3,3,
        8,8,8,9,9,9,  9,9,9,6,6,6,  6,6,6,6,3,3,
        8,8,9,9,9,9,  9,9,6,6,6,6,  6,6,6,6,6,6,
        8,8,9,9,9,9,  9,9,6,6,6,6,  6,6,6,6,6,6
    }
    { // Frame 14
        4,4,4,4,4,4,  4,4,4,4,4,1,  1,1,1,1,1,2,
        7,7,4,4,4,4,  4,4,4,4,4,1,  1,1,1,1,1,2,
        7,7,7,7,4,4,  4,4,4,4,1,1,  1,1,1,1,2,2,
        7,7,7,7,7,7,  4,4,4,4,1,1,  1,1,1,1,2,2,
        7,7,7,7,7,7,  4,4,4,1,1,1,  1,1,1,2,2,2,
        7,7,7,7,7,7,  4,4,4,1,1,1,  1,1,1,2,2,2,
        
        7,7,7,7,7,7,  5,5,5,5,5,5,  2,2,2,2,2,2,
        8,8,7,7,7,7,  5,5,5,5,5,5,  2,2,2,2,2,2,
        8,8,8,8,7,7,  5,5,5,5,5,5,  2,2,2,2,2,2,
        8,8,8,8,8,8,  5,5,5,5,5,5,  3,3,2,2,2,2,
        8,8,8,8,8,8,  5,5,5,5,5,5,  3,3,3,3,2,2,
        8,8,8,8,8,8,  5,5,5,5,5,5,  3,3,3,3,3,3,
        
        8,8,8,9,9,9,  9,9,9,6,6,6,  3,3,3,3,3,3,
        8,8,8,9,9,9,  9,9,9,6,6,6,  3,3,3,3,3,3,
        8,8,9,9,9,9,  9,9,6,6,6,6,  3,3,3,3,3,3,
        8,8,9,9,9,9,  9,9,6,6,6,6,  6,6,3,3,3,3,
        8,9,9,9,9,9,  9,6,6,6,6,6,  6,6,6,6,3,3,
        8,9,9,9,9,9,  9,6,6,6,6,6,  6,6,6,6,6,6
    }
    { // Frame 15
        7,7,4,4,4,4,  4,4,4,4,4,4,  1,1,1,1,1,1,
        7,7,7,7,4,4,  4,4,4,4,4,4,  1,1,1,1,1,1,
        7,7,7,7,7,7,  4,4,4,4,4,1,  1,1,1,1,1,2,
        7,7,7,7,7,7,  4,4,4,4,4,1,  1,1,1,1,1,2,
        7,7,7,7,7,7,  4,4,4,4,1,1,  1,1,1,1,2,2,
        7,7,7,7,7,7,  4,4,4,4,1,1,  1,1,1,1,2,2,
        
        8,8,7,7,7,7,  5,5,5,5,5,5,  2,2,2,2,2,2,
        8,8,8,8,7,7,  5,5,5,5,5,5,  2,2,2,2,2,2,
        8,8,8,8,8,8,  5,5,5,5,5,5,  2,2,2,2,2,2,
        8,8,8,8,8,8,  5,5,5,5,5,5,  2,2,2,2,2,2,
        8,8,8,8,8,8,  5,5,5,5,5,5,  3,3,2,2,2,2,
        8,8,8,8,8,8,  5,5,5,5,5,5,  3,3,3,3,2,2,
        
        8,8,9,9,9,9,  9,9,6,6,6,6,  3,3,3,3,3,3,
        8,8,9,9,9,9,  9,9,6,6,6,6,  3,3,3,3,3,3,
        8,9,9,9,9,9,  9,6,6,6,6,6,  3,3,3,3,3,3,
        8,9,9,9,9,9,  9,6,6,6,6,6,  3,3,3,3,3,3,
        9,9,9,9,9,9,  6,6,6,6,6,6,  6,6,3,3,3,3,
        9,9,9,9,9,9,  6,6,6,6,6,6,  6,6,6,6,3,3
    }
    { // Frame 16
        7,7,7,7,4,4,  4,4,4,4,4,4,  1,1,1,1,1,1,
        7,7,7,7,7,7,  4,4,4,4,4,4,  1,1,1,1,1,1,
        7,7,7,7,7,7,  4,4,4,4,4,4,  1,1,1,1,1,1,
        7,7,7,7,7,7,  4,4,4,4,4,4,  1,1,1,1,1,1,
        7,7,7,7,7,7,  4,4,4,4,4,1,  1,1,1,1,1,2,
        7,7,7,7,7,7,  4,4,4,4,4,1,  1,1,1,1,1,2,
        
        8,8,8,8,7,7,  5,5,5,5,5,5,  2,2,2,2,2,2,
        8,8,8,8,8,8,  5,5,5,5,5,5,  2,2,2,2,2,2,
        8,8,8,8,8,8,  5,5,5,5,5,5,  2,2,2,2,2,2,
        8,8,8,8,8,8,  5,5,5,5,5,5,  2,2,2,2,2,2,
        8,8,8,8,8,8,  5,5,5,5,5,5,  2,2,2,2,2,2,
        8,8,8,8,8,8,  5,5,5,5,5,5,  3,3,2,2,2,2,
        
        8,9,9,9,9,9,  9,6,6,6,6,6,  3,3,3,3,3,3,
        8,9,9,9,9,9,  9,6,6,6,6,6,  3,3,3,3,3,3,
        9,9,9,9,9,9,  6,6,6,6,6,6,  3,3,3,3,3,3,
        9,9,9,9,9,9,  6,6,6,6,6,6,  3,3,3,3,3,3,
        9,9,9,9,9,9,  6,6,6,6,6,6,  3,3,3,3,3,3,
        9,9,9,9,9,9,  6,6,6,6,6,6,  6,6,3,3,3,3
    }
    { // Frame 17
        7,7,7,7,7,7,  4,4,4,4,4,4,  1,1,1,1,1,1,
        7,7,7,7,7,7,  4,4,4,4,4,4,  1,1,1,1,1,1,
        7,7,7,7,7,7,  4,4,4,4,4,4,  1,1,1,1,1,1,
        7,7,7,7,7,7,  4,4,4,4,4,4,  1,1,1,1,1,1,
        7,7,7,7,7,7,  4,4,4,4,4,4,  1,1,1,1,1,1,
        7,7,7,7,7,7,  4,4,4,4,4,4,  1,1,1,1,1,1,
        
        8,8,8,8,8,8,  5,5,5,5,5,5,  2,2,2,2,2,2,
        8,8,8,8,8,8,  5,5,5,5,5,5,  2,2,2,2,2,2,
        8,8,8,8,8,8,  5,5,5,5,5,5,  2,2,2,2,2,2,
        8,8,8,8,8,8,  5,5,5,5,5,5,  2,2,2,2,2,2,
        8,8,8,8,8,8,  5,5,5,5,5,5,  2,2,2,2,2,2,
        8,8,8,8,8,8,  5,5,5,5,5,5,  2,2,2,2,2,2,
        
        9,9,9,9,9,9,  6,6,6,6,6,6,  3,3,3,3,3,3,
        9,9,9,9,9,9,  6,6,6,6,6,6,  3,3,3,3,3,3,
        9,9,9,9,9,9,  6,6,6,6,6,6,  3,3,3,3,3,3,
        9,9,9,9,9,9,  6,6,6,6,6,6,  3,3,3,3,3,3,
        9,9,9,9,9,9,  6,6,6,6,6,6,  3,3,3,3,3,3,
        9,9,9,9,9,9,  6,6,6,6,6,6,  3,3,3,3,3,3
    }
};

int faceMatrix[9] = {
    1,2,3,
    4,5,6,
    1,2,3
};



// SETUP FUNCTION----------------------------------
void setup() {
  front.begin();
  front.setBrightness(128); // 1/4 brightness

    // right.begin(); 
  // right.setBrightness(64);

    // up.begin();
  // up.setBrightness(64);

    // left.begin();
  // left.setBrightness(64);

    // back.begin();
  // back.setBrightness(64);

    // down.begin();
  // down.setBrightness(64);
    // Uncomment the above when we have more faces ready
    
}
// END SETUP FUNCTION------------------------------






// LOOP FUNCTION-----------------------------------
void loop() {

  showFace(front, faceMatrix);
  front.show();

  delay(2000);
  turnFaceClockwise(faceMatrix);
  

  
}
// END LOOP FUNCTION-------------------------------




// SETPANELCOLOR FUNCTION---------------------------------
void setPanelColor(Adafruit_NeoPixel& face, int panelNum, uint32_t color) {

    // setPanelColor: Fills a solid color on one panel of a face.
    // Arguments: Neopixel object pointer, number of panel to change, and a color value

    for (int i=0; i<9; i++) {
        face.setPixelColor(i + (panelNum * LEDS_PER_PANEL), color);
    }

}
// END SETPANELCOLOR FUNCTION---------------------




// SHOWFACE FUNCTION----------------------------------------
void showFace(Adafruit_NeoPixel& face, int *matrix) {

    // showFace: Shows a 3x3 matrix on one face.
    // Arguments: Neopixel object pointer, a 3x3 matrix of color values

    for (int i=0; i<9; i++) { 
        uint32_t color;
        if (matrix[i] == 1) {
            color = RED;
        } else if (matrix[i] == 2) {
            color = GREEN;
        } else if (matrix[i] == 3) {
            color = BLUE;
        } else if (matrix[i] == 4) {
            color = WHITE;
        } else if (matrix[i] == 5) {
            color = ORANGE;
        } else if (matrix[i] == 6) {
            color = YELLOW;
        }
        setPanelColor(face, i, color);
    }
  
}
// END SHOWFACE FUNCTION----------------------------------------





// FILLPANELCOLOR FUNCTION---------------------------------
void fillPanelColor(Adafruit_NeoPixel& face, uint32_t color) {

    // fillPanelColor: Extends setPanelColor to fill a solid color on an entire face.
    // Arguments: Neopixel object pointer and a color value

    for (int i=0; i<9; i++) {
        setPanelColor(face, i, color);
    }

}
// END FILLPANELCOLOR FUNCTION-----------------------------





// SETPATTERN FUNCTION-------------------------------------

void setPattern(Adafruit_NeoPixel& face, int panelNum, int matrix[36], uint32_t color1, uint32_t color2) {

    // setPattern: Shows a 6x6 pattern on one panel of a face.
    // Arguments: Neopixel object pointer, number of panel to change, a matrix value, a color for a '1' value, and a color for a '2' value.

    // Loop through the matrix
    for (int i=0; i<35; i++) {

        // What color should the pixel be?

        if (matrix[i] == 1) {
            face.setPixelColor(i + (panelNum * LEDS_PER_PANEL), color1);
        } else if (matrix[i] == 2) {
            face.setPixelColor(i + (panelNum * LEDS_PER_PANEL), color2);
        } else {
            // Blank
            face.setPixelColor(i + (panelNum * LEDS_PER_PANEL), face.Color(0, 0, 0));
        }
    }
}




// FILLPATTERN FUNCTION------------------------------------
void fillPattern(Adafruit_NeoPixel& face, int matrix[36], uint32_t color1, uint32_t color2) {

    // fillPattern: Shows a 6x6 pattern on all 9 panels of a face.
    // Arguments: Neopixel object pointer, a matrix value, a color for a '1' value, and a color for a '2' value.

    for (int i=0; i<9; i++) {
        setPattern(face, i, matrix, color1, color2);
    }

}
// END FILLPATTERN FUNCTION--------------------------------






// WHEEL FUNCTION------------------------------------------
// Input a value 0 to 255 to get a color value.
// The colors are a transition r - g - b - back to r.
uint32_t Wheel(byte WheelPos) {
    WheelPos = 255 - WheelPos;
    if(WheelPos < 85)
    {
        return front.Color(255 - WheelPos * 3, 0, WheelPos * 3);
    }
    else if(WheelPos < 170)
    {
        WheelPos -= 85;
        return front.Color(0, WheelPos * 3, 255 - WheelPos * 3);
    }
    else
    {
        WheelPos -= 170;
        return front.Color(WheelPos * 3, 255 - WheelPos * 3, 0);
    }
}
// END WHEEL FUNCTION--------------------------------------





// TURNFACECLOCKWISE FUNCTION------------------------------
/*
1 2 3 
4 5 6
7 8 9
changes to
7 4 1
8 5 2
9 6 3
*/
void turnFaceClockwise(int *matrix) {

    int matrix2[9];

    matrix2[0] = matrix[6];
    matrix2[1]=  matrix[3];
    matrix2[2] = matrix[0];
    matrix2[3] = matrix[7];
    matrix2[4] = matrix[4];
    matrix2[5] = matrix[1];
    matrix2[6] = matrix[8];
    matrix2[7] = matrix[5];
    matrix2[8] = matrix[2];

    //Change the original values of matrix to the rotated ones
    for(byte i=0; i<9; i++){
        matrix[i] = matrix2[i];
    }

}
// END TURNFACECLOCKWISE FUNCTION--------------------------

// TURNFACECOUNTERCLOCKWISE FUNCTION-----------------------

//
/*
1 2 3 
4 5 6
7 8 9
changes to
3 6 9
2 5 8
1 4 7
*/
void turnFaceCounterClockwise(int *matrix) {


    int matrix2[9];

    matrix2[0] = matrix[2];
    matrix2[1]=  matrix[5];
    matrix2[2] = matrix[8];
    matrix2[3] = matrix[1];
    matrix2[4] = matrix[4];
    matrix2[5] = matrix[7];
    matrix2[6] = matrix[0];
    matrix2[7] = matrix[3];
    matrix2[8] = matrix[6];

    //Change the original values of matrix to the rotated ones
    for(int i=0; i<9; i++){
        matrix[i] = matrix2[i];
    }


}


void showAnimation(Adafruit_NeoPixel& face, char *animationMatrix, int *faceMatrix) {

    char originalPanelNumber;
    int originalPanelColor;

    // Every frame: 
    for (int frameNumi=0; frameNum<17; frameNum++) {
        // Every light in the frame: 
        for (int lightNum=0; lightNum<324; lightNum++) {

            // This is a number (int) from 1-9
            originalPanelNumber = animationMatrix[frameNum][lightNum];

            // This is a number (char) from 1-6, represents the color of the light we're changing
            originalPanelColor = faceMatrix[originalPanelNumber - 1];

            if (originalPanelColor == 1) {
                face.setPixelColor(lightNum, RED);         
            } else if (originalPanelColor == 2) {
                face.setPixelColor(lightNum, GREEN);         
            } else if (originalPanelColor == 3) {
                face.setPixelColor(lightNum, BLUE);         
            } else if (originalPanelColor == 4) {
                face.setPixelColor(lightNum, WHTIE);         
            } else if (originalPanelColor == 5) {
        d        face.setPixelColor(lightNum, ORANGE);         
            } else if (originalPanelColor == 6) {
                face.setPixelColor(lightNum, YELLOW);         
            }

        }

        // Update the changes and wait

        face.show();
        delay(75);
    }

}
// OEND TURNFACECOUNTERCLOCKWISE
//FUNCTION--------------------
// Pass pointers,not the actual variables (use a *)
/*     d e f
     c 1 2 3 g 
     b 4 5 6 h
     a 7 8 9 i
       l k j */
/*    a b c
    l 7 4 1 d
    k 8 5 2 e
    j 9 6 3 f
      g h i */

void turncubeleft(Adafruit_NeoPixel& face, int panelnum, char *matrix) {

    int matrix2[4][9];
   matrix2[1][0] = matrix[1][2];
    matrix2[1][1]=  matrix[1][5];
    matrix2[1][2] = matrix[1][8];
    matrix2[1][3] = matrix[1][1];
    matrix2[1][4] = matrix[1][4];
    matrix2[1][5] = matrix[1][7];
    matrix2[1][6] = matrix[1][0];
    matrix2[1][7] = matrix[1][3];
    matrix2[1][8] = matrix[1][6];
    ma
      for(int i=0; i<9; i++){
        matrix[i][i] = matrix2[i][i];
    }
 


   }
   
   


   
   