/*
  TO FILL IN LATER
    Sketch title

    The circuit:
    * Adafruit Feather M4
    * Adafruit NeoPxl8 M4 Featherwing (probably not anymore)
    * Wiring harness to breadboard
    * 5V 10A power supply and NeoPxl8 data to light fronts 

    Last modified 17 May 22
    Gabe, Kevin, Lucas, Neev, Owen, Quinn, and Rishy
    Ms. Hill's B5 Algebra 2, 2021-22

  https://github.com/t-ebag/Rubiks-Cube-Project

*/

// Number of LEDs per side
#define LEDS_PER_FACE 324
// Number of LEDs per panel
#define LEDS_PER_PANEL 36

// Pins for each of the faces
#define F_FACE_PIN 5
#define R_FACE_PIN 6
#define U_FACE_PIN 9
#define L_FACE_PIN 10
#define B_FACE_PIN 11
#define D_FACE_PIN 12

// Import libraries
#include <Adafruit_GFX.h>
#include <Adafruit_NeoPixel.h>
#include <Adafruit_NeoMatrix.h>
#include "gamma.h"


// This is for the NeoMatrix library, needs color shifting :(
static uint32_t expandColor(uint16_t color) {
  return ((uint32_t)pgm_read_byte(&gamma5[color >> 11]) << 16) |
         ((uint32_t)pgm_read_byte(&gamma6[(color >> 5) & 0x3F]) << 8) |
         pgm_read_byte(&gamma5[color & 0x1F]);
}


// Define all panels

/* Not using the standard neopixel library
Adafruit_NeoPixel front(324, F_FACE_PIN);
Adafruit_NeoPixel right(324, R_FACE_PIN);
Adafruit_NeoPixel up(324, U_FACE_PIN);
Adafruit_NeoPixel left(324, L_FACE_PIN);
Adafruit_NeoPixel back(324, B_FACE_PIN);
Adafruit_NeoPixel down(324, D_FACE_PIN);
*/
// https://learn.adafruit.com/adafruit-neopixel-uberguide/neomatrix-library

// 6 by 6 for each panel, 3 by 3 for the whole face
Adafruit_NeoMatrix front = Adafruit_NeoMatrix(6, 6, 3, 3, F_FACE_PIN,
    NEO_TILE_TOP   + NEO_TILE_LEFT   + NEO_TILE_ROWS   + NEO_TILE_PROGRESSIVE +
    NEO_MATRIX_TOP + NEO_MATRIX_LEFT + NEO_MATRIX_ROWS + NEO_MATRIX_PROGRESSIVE,
    NEO_GRB + NEO_KHZ800);

Adafruit_NeoMatrix right = Adafruit_NeoMatrix(6, 6, 3, 3, R_FACE_PIN,
    NEO_TILE_TOP   + NEO_TILE_LEFT   + NEO_TILE_ROWS   + NEO_TILE_PROGRESSIVE +
    NEO_MATRIX_TOP + NEO_MATRIX_LEFT + NEO_MATRIX_ROWS + NEO_MATRIX_PROGRESSIVE,
    NEO_GRB + NEO_KHZ800);

Adafruit_NeoMatrix up = Adafruit_NeoMatrix(6, 6, 3, 3, U_FACE_PIN,
    NEO_TILE_TOP   + NEO_TILE_LEFT   + NEO_TILE_ROWS   + NEO_TILE_PROGRESSIVE +
    NEO_MATRIX_TOP + NEO_MATRIX_LEFT + NEO_MATRIX_ROWS + NEO_MATRIX_PROGRESSIVE,
    NEO_GRB + NEO_KHZ800);

Adafruit_NeoMatrix left = Adafruit_NeoMatrix(6, 6, 3, 3, L_FACE_PIN,
    NEO_TILE_TOP   + NEO_TILE_LEFT   + NEO_TILE_ROWS   + NEO_TILE_PROGRESSIVE +
    NEO_MATRIX_TOP + NEO_MATRIX_LEFT + NEO_MATRIX_ROWS + NEO_MATRIX_PROGRESSIVE,
    NEO_GRB + NEO_KHZ800);

Adafruit_NeoMatrix back = Adafruit_NeoMatrix(6, 6, 3, 3, B_FACE_PIN,
    NEO_TILE_TOP   + NEO_TILE_LEFT   + NEO_TILE_ROWS   + NEO_TILE_PROGRESSIVE +
    NEO_MATRIX_TOP + NEO_MATRIX_LEFT + NEO_MATRIX_ROWS + NEO_MATRIX_PROGRESSIVE,
    NEO_GRB + NEO_KHZ800);

Adafruit_NeoMatrix down = Adafruit_NeoMatrix(6, 6, 3, 3, D_FACE_PIN,
    NEO_TILE_TOP   + NEO_TILE_LEFT   + NEO_TILE_ROWS   + NEO_TILE_PROGRESSIVE +
    NEO_MATRIX_TOP + NEO_MATRIX_LEFT + NEO_MATRIX_ROWS + NEO_MATRIX_PROGRESSIVE,
    NEO_GRB + NEO_KHZ800);

 

// Define color values
// Adafruit_NeoMatrix uses a different color scheme than Adafruit_NeoPixel.
// The normal setPixelColor function isn't actually supported well, so
// you have to expand the color to a different format using a function from the source code :(
// Anytime you use the setPixelColor function you need to use the expanded version of the color.
uint16_t RED = front.Color(255, 0, 0);
uint32_t RED_EXPANDED = expandColor(RED);
uint16_t GREEN = front.Color(0, 255, 0);
uint32_t GREEN_EXPANDED = expandColor(GREEN);
uint16_t BLUE = front.Color(0, 0, 255);
uint32_t BLUE_EXPANDED = expandColor(BLUE);
uint16_t WHITE = front.Color(255, 255, 200);
uint32_t WHITE_EXPANDED = expandColor(WHITE);
uint16_t ORANGE = front.Color(255, 40, 0);
uint32_t ORANGE_EXPANDED = expandColor(ORANGE);
uint16_t YELLOW = front.Color(255, 80, 0);
uint32_t YELLOW_EXPANDED = expandColor(YELLOW);




int cubeState[6][9] = {
    {
        1,1,1,
        1,1,1,
        1,1,1
    },{
        2,2,2,
        2,2,2,
        2,2,2
    },{
        3,3,3,
        3,3,3,
        3,3,3
    },{
        4,4,4,
        4,4,4,
        4,4,4
    },{
        5,5,5,
        5,5,5,
        5,5,5
    },{
        6,6,6,
        6,6,6,
        6,6,6
    }
};
int animationClockwise[18][324] = {
    { // Frame 1
        1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1,
        2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2,
        3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3,
        4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6,
        7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7,
        8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8,
        9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9
    },
    { // Frame 2
        1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 4,1,1,1,1,1,
        1,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2,
        2,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3,
        4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 7,4,4,4,4,4,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        6,6,6,6,6,3, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6,
        7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,8,
        8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,9,
        9,9,9,9,9,6, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9
    },
    { // Frame 3
        1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 4,1,1,1,1,1, 4,4,1,1,1,1,
        1,1,2,2,2,2, 1,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2,
        2,2,3,3,3,3, 2,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3,
        4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 7,4,4,4,4,4, 7,7,4,4,4,4,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        6,6,6,6,3,3, 6,6,6,6,6,3, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6,
        7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,8, 7,7,7,7,8,8,
        8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,9, 8,8,8,8,9,9,
        9,9,9,9,6,6, 9,9,9,9,9,6, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9
    },
    { // Frame 4
        1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 4,1,1,1,1,1, 4,4,1,1,1,1, 4,4,4,1,1,1,
        1,1,1,2,2,2, 1,1,2,2,2,2, 1,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2,
        2,2,2,3,3,3, 2,2,3,3,3,3, 2,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3,
        4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 7,4,4,4,4,4, 7,7,4,4,4,4, 7,7,7,4,4,4,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        6,6,6,3,3,3, 6,6,6,6,3,3, 6,6,6,6,6,3, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6,
        7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,8, 7,7,7,7,8,8, 7,7,7,8,8,8,
        8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,9, 8,8,8,8,9,9, 8,8,8,9,9,9,
        9,9,9,6,6,6, 9,9,9,9,6,6, 9,9,9,9,9,6, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9
    },
    { // Frame 5
        1,1,1,1,1,1, 1,1,1,1,1,1, 4,1,1,1,1,1, 4,4,1,1,1,1, 4,4,4,1,1,1, 4,4,4,4,1,1,
        1,1,1,1,2,2, 1,1,1,2,2,2, 1,1,2,2,2,2, 1,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2,
        2,2,2,2,3,3, 2,2,2,3,3,3, 2,2,3,3,3,3, 2,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3,
        4,4,4,4,4,4, 4,4,4,4,4,4, 7,4,4,4,4,4, 7,7,4,4,4,4, 7,7,7,4,4,4, 7,7,7,7,4,4,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        6,6,3,3,3,3, 6,6,6,3,3,3, 6,6,6,6,3,3, 6,6,6,6,6,3, 6,6,6,6,6,6, 6,6,6,6,6,6,
        7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,8, 7,7,7,7,8,8, 7,7,7,8,8,8, 7,7,8,8,8,8,
        8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,9, 8,8,8,8,9,9, 8,8,8,9,9,9, 8,8,9,9,9,9,
        9,9,6,6,6,6, 9,9,9,6,6,6, 9,9,9,9,6,6, 9,9,9,9,9,6, 9,9,9,9,9,9, 9,9,9,9,9,9
    },
    { // Frame 6
        1,1,1,1,1,1, 4,1,1,1,1,1, 4,4,1,1,1,1, 4,4,4,1,1,1, 4,4,4,4,1,1, 4,4,4,4,4,1,
        1,1,1,1,1,2, 1,1,1,1,2,2, 1,1,1,2,2,2, 1,1,2,2,2,2, 1,2,2,2,2,2, 2,2,2,2,2,2,
        2,2,2,2,2,3, 2,2,2,2,3,3, 2,2,2,3,3,3, 2,2,3,3,3,3, 2,3,3,3,3,3, 3,3,3,3,3,3,
        4,4,4,4,4,4, 7,4,4,4,4,4, 7,7,4,4,4,4, 7,7,7,4,4,4, 7,7,7,7,4,4, 7,7,7,7,7,4,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        6,3,3,3,3,3, 6,6,3,3,3,3, 6,6,6,3,3,3, 6,6,6,6,3,3, 6,6,6,6,6,3, 6,6,6,6,6,6,
        7,7,7,7,7,7, 7,7,7,7,7,8, 7,7,7,7,8,8, 7,7,7,8,8,8, 7,7,8,8,8,8, 7,8,8,8,8,8,
        8,8,8,8,8,8, 8,8,8,8,8,9, 8,8,8,8,9,9, 8,8,8,9,9,9, 8,8,9,9,9,9, 8,9,9,9,9,9,
        9,6,6,6,6,6, 9,9,6,6,6,6, 9,9,9,6,6,6, 9,9,9,9,6,6, 9,9,9,9,9,6, 9,9,9,9,9,9
    },
    { // Frame 7
        4,1,1,1,1,1, 4,4,1,1,1,1, 4,4,4,1,1,1, 4,4,4,4,1,1, 4,4,4,4,4,1, 4,4,4,4,4,4,
        1,1,1,1,1,1, 1,1,1,1,1,2, 1,1,1,1,2,2, 1,1,1,2,2,2, 1,1,2,2,2,2, 1,2,2,2,2,2,
        2,2,2,2,2,2, 2,2,2,2,2,3, 2,2,2,2,3,3, 2,2,2,3,3,3, 2,2,3,3,3,3, 2,3,3,3,3,3,
        7,4,4,4,4,4, 7,7,4,4,4,4, 7,7,7,4,4,4, 7,7,7,7,4,4, 7,7,7,7,7,4, 7,7,7,7,7,7,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        3,3,3,3,3,3, 6,3,3,3,3,3, 6,6,3,3,3,3, 6,6,6,3,3,3, 6,6,6,6,3,3, 6,6,6,6,6,3,
        7,7,7,7,7,8, 7,7,7,7,8,8, 7,7,7,8,8,8, 7,7,8,8,8,8, 7,8,8,8,8,8, 8,8,8,8,8,8,
        8,8,8,8,8,9, 8,8,8,8,9,9, 8,8,8,9,9,9, 8,8,9,9,9,9, 8,9,9,9,9,9, 9,9,9,9,9,9,
        6,6,6,6,6,6, 9,6,6,6,6,6, 9,9,6,6,6,6, 9,9,9,6,6,6, 9,9,9,9,6,6, 9,9,9,9,9,6
    },
    { // Frame 8
        4,4,1,1,1,1, 4,4,4,1,1,1, 4,4,4,4,1,1, 4,4,4,4,4,1, 4,4,4,4,4,4, 7,4,4,4,4,4,
        1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,2, 1,1,1,1,2,2, 1,1,1,2,2,2, 4,1,2,2,2,2,
        1,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,3, 2,2,2,2,3,3, 2,2,2,3,3,3, 2,2,3,3,3,3,
        7,7,4,4,4,4, 7,7,7,4,4,4, 7,7,7,7,4,4, 7,7,7,7,7,4, 7,7,7,7,7,7, 7,7,7,7,7,8,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        2,3,3,3,3,3, 3,3,3,3,3,3, 6,3,3,3,3,3, 6,6,3,3,3,3, 6,6,6,3,3,3, 6,6,6,6,3,3,
        7,7,7,7,8,8, 7,7,7,8,8,8, 7,7,8,8,8,8, 7,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,9,
        8,8,8,8,9,6, 8,8,8,9,9,9, 8,8,9,9,9,9, 8,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9,
        6,6,6,6,6,3, 6,6,6,6,6,6, 9,6,6,6,6,6, 9,9,6,6,6,6, 9,9,9,6,6,6, 9,9,9,9,6,6
    },
    { // Frame 9
        4,4,4,1,1,1, 4,4,4,4,1,1, 4,4,4,4,4,1, 4,4,4,4,4,4, 7,4,4,4,4,4, 7,7,4,4,4,4,
        1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,2, 4,1,1,1,2,2, 4,4,1,2,2,2,
        1,1,2,2,2,2, 1,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,3, 2,2,2,2,3,3, 2,2,2,3,3,3,
        7,7,7,4,4,4, 7,7,7,7,4,4, 7,7,7,7,7,4, 7,7,7,7,7,7, 7,7,7,7,7,8, 7,7,7,7,8,8,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        2,2,3,3,3,3, 2,3,3,3,3,3, 3,3,3,3,3,3, 6,3,3,3,3,3, 6,6,3,3,3,3, 6,6,6,3,3,3,
        7,7,7,8,8,8, 7,7,8,8,8,8, 7,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,9, 8,8,8,8,9,9,
        8,8,8,9,6,6, 8,8,9,9,9,6, 8,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9,
        6,6,6,6,3,3, 6,6,6,6,6,3, 6,6,6,6,6,6, 9,6,6,6,6,6, 9,9,6,6,6,6, 9,9,9,6,6,6
    },
    { // Frame 10
        4,4,4,4,1,1, 4,4,4,4,4,1, 4,4,4,4,4,4, 7,4,4,4,4,4, 7,7,4,4,4,4, 7,7,7,4,4,4,
        1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 4,1,1,1,1,1, 4,4,1,1,1,2, 4,4,4,1,2,2,
        1,1,1,2,2,2, 1,1,2,2,2,2, 1,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,3, 2,2,2,2,3,3,
        7,7,7,7,4,4, 7,7,7,7,7,4, 7,7,7,7,7,7, 7,7,7,7,7,8, 7,7,7,7,8,8, 7,7,7,8,8,8,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        2,2,2,3,3,3, 2,2,3,3,3,3, 2,3,3,3,3,3, 3,3,3,3,3,3, 6,3,3,3,3,3, 6,6,3,3,3,3,
        7,7,8,8,8,8, 7,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,9, 8,8,8,8,9,9, 8,8,8,9,9,9,
        8,8,9,6,6,6, 8,9,9,9,6,6, 9,9,9,9,9,6, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9,
        6,6,6,3,3,3, 6,6,6,6,3,3, 6,6,6,6,6,3, 6,6,6,6,6,6, 9,6,6,6,6,6, 9,9,6,6,6,6
    },
    { // Frame 11
        4,4,4,4,4,1, 4,4,4,4,4,4, 7,4,4,4,4,4, 7,7,4,4,4,4, 7,7,7,4,4,4, 7,7,7,7,4,4,
        1,1,1,1,1,1, 1,1,1,1,1,1, 4,1,1,1,1,1, 4,4,1,1,1,1, 4,4,4,1,1,1, 4,4,4,4,1,2,
        1,1,1,1,2,2, 1,1,1,2,2,2, 1,1,2,2,2,2, 1,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,3,
        7,7,7,7,7,4, 7,7,7,7,7,7, 7,7,7,7,7,8, 7,7,7,7,8,8, 7,7,7,8,8,8, 7,7,8,8,8,8,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        2,2,2,2,3,3, 2,2,2,3,3,3, 2,2,3,3,3,3, 2,3,3,3,3,3, 3,3,3,3,3,3, 6,3,3,3,3,3,
        7,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,9, 8,8,8,8,9,9, 8,8,8,9,9,9, 8,8,9,9,9,9,
        8,9,6,6,6,6, 9,9,9,6,6,6, 9,9,9,9,6,6, 9,9,9,9,9,6, 9,9,9,9,9,9, 9,9,9,9,9,9,
        6,6,3,3,3,3, 6,6,6,3,3,3, 6,6,6,6,3,3, 6,6,6,6,6,3, 6,6,6,6,6,6, 9,6,6,6,6,6
    },
    { // Frame 12
        4,4,4,4,4,4, 7,4,4,4,4,4, 7,7,4,4,4,4, 7,7,7,4,4,4, 7,7,7,7,4,4, 7,7,7,7,7,4,
        1,1,1,1,1,1, 4,1,1,1,1,1, 4,4,1,1,1,1, 4,4,4,1,1,1, 4,4,4,4,1,1, 4,4,4,4,4,1,
        1,1,1,1,1,2, 1,1,1,1,2,2, 1,1,1,2,2,2, 1,1,2,2,2,2, 1,2,2,2,2,2, 2,2,2,2,2,2,
        7,7,7,7,7,7, 7,7,7,7,7,8, 7,7,7,7,8,8, 7,7,7,8,8,8, 7,7,8,8,8,8, 7,8,8,8,8,8,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        2,2,2,2,2,3, 2,2,2,2,3,3, 2,2,2,3,3,3, 2,2,3,3,3,3, 2,3,3,3,3,3, 3,3,3,3,3,3,
        8,8,8,8,8,8, 8,8,8,8,8,9, 8,8,8,8,9,9, 8,8,8,9,9,9, 8,8,9,9,9,9, 8,9,9,9,9,9,
        9,6,6,6,6,6, 9,9,6,6,6,6, 9,9,9,6,6,6, 9,9,9,9,6,6, 9,9,9,9,9,6, 9,9,9,9,9,9,
        6,3,3,3,3,3, 6,6,3,3,3,3, 6,6,6,3,3,3, 6,6,6,6,3,3, 6,6,6,6,6,3, 6,6,6,6,6,6
    },
    { // Frame 13
        7,4,4,4,4,4, 7,7,4,4,4,4, 7,7,7,4,4,4, 7,7,7,7,4,4, 7,7,7,7,7,4, 7,7,7,7,7,7,
        4,1,1,1,1,1, 4,4,1,1,1,1, 4,4,4,1,1,1, 4,4,4,4,1,1, 4,4,4,4,4,1, 4,4,4,4,4,4,
        1,1,1,1,1,1, 1,1,1,1,1,2, 1,1,1,1,2,2, 1,1,1,2,2,2, 1,1,2,2,2,2, 1,2,2,2,2,2,
        7,7,7,7,7,8, 7,7,7,7,8,8, 7,7,7,8,8,8, 7,7,8,8,8,8, 7,8,8,8,8,8, 8,8,8,8,8,8,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        2,2,2,2,2,2, 2,2,2,2,2,3, 2,2,2,2,3,3, 2,2,2,3,3,3, 2,2,3,3,3,3, 2,3,3,3,3,3,
        8,8,8,8,8,9, 8,8,8,8,9,9, 8,8,8,9,9,9, 8,8,9,9,9,9, 8,9,9,9,9,9, 9,9,9,9,9,9,
        6,6,6,6,6,6, 9,6,6,6,6,6, 9,9,6,6,6,6, 9,9,9,6,6,6, 9,9,9,9,6,6, 9,9,9,9,9,6,
        3,3,3,3,3,3, 6,3,3,3,3,3, 6,6,3,3,3,3, 6,6,6,3,3,3, 6,6,6,6,3,3, 6,6,6,6,6,3
    },
    { // Frame 14
        7,7,4,4,4,4, 7,7,7,4,4,4, 7,7,7,7,4,4, 7,7,7,7,7,4, 7,7,7,7,7,7, 7,7,7,7,7,7,
        4,4,1,1,1,1, 4,4,4,1,1,1, 4,4,4,4,1,1, 4,4,4,4,4,1, 4,4,4,4,4,4, 4,4,4,4,4,4,
        1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,2, 1,1,1,1,2,2, 1,1,1,2,2,2, 1,1,2,2,2,2,
        7,7,7,7,8,8, 7,7,7,8,8,8, 7,7,8,8,8,8, 7,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,3, 2,2,2,2,3,3, 2,2,2,3,3,3, 2,2,3,3,3,3,
        8,8,8,8,9,9, 8,8,8,9,9,9, 8,8,9,9,9,9, 8,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9,
        6,6,6,6,6,6, 6,6,6,6,6,6, 9,6,6,6,6,6, 9,9,6,6,6,6, 9,9,9,6,6,6, 9,9,9,9,6,6,
        3,3,3,3,3,3, 3,3,3,3,3,3, 6,3,3,3,3,3, 6,6,3,3,3,3, 6,6,6,3,3,3, 6,6,6,6,3,3
    },
    { // Frame 15
        7,7,7,4,4,4, 7,7,7,7,4,4, 7,7,7,7,7,4, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7,
        4,4,4,1,1,1, 4,4,4,4,1,1, 4,4,4,4,4,1, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4,
        1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,2, 1,1,1,1,2,2, 1,1,1,2,2,2,
        7,7,7,8,8,8, 7,7,8,8,8,8, 7,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,3, 2,2,2,2,3,3, 2,2,2,3,3,3,
        8,8,8,9,9,9, 8,8,9,9,9,9, 8,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9,
        6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 9,6,6,6,6,6, 9,9,6,6,6,6, 9,9,9,6,6,6,
        3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 6,3,3,3,3,3, 6,6,3,3,3,3, 6,6,6,3,3,3
    },
    { // Frame 16
        7,7,7,7,4,4, 7,7,7,7,7,4, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7,
        4,4,4,4,1,1, 4,4,4,4,4,1, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4,
        1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,2, 1,1,1,1,2,2,
        7,7,8,8,8,8, 7,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,3, 2,2,2,2,3,3,
        8,8,9,9,9,9, 8,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9,
        6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 9,6,6,6,6,6, 9,9,6,6,6,6,
        3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 6,3,3,3,3,3, 6,6,3,3,3,3
    },
    { // Frame 17
        7,7,7,7,7,4, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7,
        4,4,4,4,4,1, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4,
        1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,2,
        7,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,3,
        8,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9,
        6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 9,6,6,6,6,6,
        3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 6,3,3,3,3,3
    },
    { // Frame 18
        7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7,
        4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4,
        1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1,
        8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2,
        9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9,
        6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6,
        3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3
    },
};

int animationCounterClockwise[18][324] = {
    { // Frame 1
        1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1,
        2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2,
        3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3,
        4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6,
        7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7,
        8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8,
        9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9
    },
    { // Frame 2
        1,1,1,1,1,2, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1,
        2,2,2,2,2,3, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2,
        3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,6,
        1,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,9,
        4,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7,
        8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 7,8,8,8,8,8,
        9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 8,9,9,9,9,9
    },
    { // Frame 3
        1,1,1,1,2,2, 1,1,1,1,1,2, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1,
        2,2,2,2,3,3, 2,2,2,2,2,3, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2,
        3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,6, 3,3,3,3,6,6,
        1,1,4,4,4,4, 1,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,9, 6,6,6,6,9,9,
        4,4,7,7,7,7, 4,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7,
        8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 7,8,8,8,8,8, 7,7,8,8,8,8,
        9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 8,9,9,9,9,9, 8,8,9,9,9,9
    },
    { // Frame 4
        1,1,1,2,2,2, 1,1,1,1,2,2, 1,1,1,1,1,2, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1,
        2,2,2,3,3,3, 2,2,2,2,3,3, 2,2,2,2,2,3, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2,
        3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,6, 3,3,3,3,6,6, 3,3,3,6,6,6,
        1,1,1,4,4,4, 1,1,4,4,4,4, 1,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,9, 6,6,6,6,9,9, 6,6,6,9,9,9,
        4,4,4,7,7,7, 4,4,7,7,7,7, 4,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7,
        8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 7,8,8,8,8,8, 7,7,8,8,8,8, 7,7,7,8,8,8,
        9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 8,9,9,9,9,9, 8,8,9,9,9,9, 8,8,8,9,9,9
    },
    { // Frame 5
        1,1,2,2,2,2, 1,1,1,2,2,2, 1,1,1,1,2,2, 1,1,1,1,1,2, 1,1,1,1,1,1, 1,1,1,1,1,1,
        2,2,3,3,3,3, 2,2,2,3,3,3, 2,2,2,2,3,3, 2,2,2,2,2,3, 2,2,2,2,2,2, 2,2,2,2,2,2,
        3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,6, 3,3,3,3,6,6, 3,3,3,6,6,6, 3,3,6,6,6,6,
        1,1,1,1,4,4, 1,1,1,4,4,4, 1,1,4,4,4,4, 1,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,9, 6,6,6,6,9,9, 6,6,6,9,9,9, 6,6,9,9,9,9,
        4,4,4,4,7,7, 4,4,4,7,7,7, 4,4,7,7,7,7, 4,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7,
        8,8,8,8,8,8, 8,8,8,8,8,8, 7,8,8,8,8,8, 7,7,8,8,8,8, 7,7,7,8,8,8, 7,7,7,7,8,8,
        9,9,9,9,9,9, 9,9,9,9,9,9, 8,9,9,9,9,9, 8,8,9,9,9,9, 8,8,8,9,9,9, 8,8,8,8,9,9
    },
    { // Frame 6
        1,2,2,2,2,2, 1,1,2,2,2,2, 1,1,1,2,2,2, 1,1,1,1,2,2, 1,1,1,1,1,2, 1,1,1,1,1,1,
        2,3,3,3,3,3, 2,2,3,3,3,3, 2,2,2,3,3,3, 2,2,2,2,3,3, 2,2,2,2,2,3, 2,2,2,2,2,2,
        3,3,3,3,3,3, 3,3,3,3,3,6, 3,3,3,3,6,6, 3,3,3,6,6,6, 3,3,6,6,6,6, 3,6,6,6,6,6,
        1,1,1,1,1,4, 1,1,1,1,4,4, 1,1,1,4,4,4, 1,1,4,4,4,4, 1,4,4,4,4,4, 4,4,4,4,4,4,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        6,6,6,6,6,6, 6,6,6,6,6,9, 6,6,6,6,9,9, 6,6,6,9,9,9, 6,6,9,9,9,9, 6,9,9,9,9,9,
        4,4,4,4,4,7, 4,4,4,4,7,7, 4,4,4,7,7,7, 4,4,7,7,7,7, 4,7,7,7,7,7, 7,7,7,7,7,7,
        8,8,8,8,8,8, 7,8,8,8,8,8, 7,7,8,8,8,8, 7,7,7,8,8,8, 7,7,7,7,8,8, 7,7,7,7,7,8,
        9,9,9,9,9,9, 8,9,9,9,9,9, 8,8,9,9,9,9, 8,8,8,9,9,9, 8,8,8,8,9,9, 8,8,8,8,8,9
    },
    { // Frame 7
        2,2,2,2,2,2, 1,2,2,2,2,2, 1,1,2,2,2,2, 1,1,1,2,2,2, 1,1,1,1,2,2, 1,1,1,1,1,2,
        3,3,3,3,3,3, 2,3,3,3,3,3, 2,2,3,3,3,3, 2,2,2,3,3,3, 2,2,2,2,3,3, 2,2,2,2,2,3,
        3,3,3,3,3,6, 3,3,3,3,6,6, 3,3,3,6,6,6, 3,3,6,6,6,6, 3,6,6,6,6,6, 6,6,6,6,6,6,
        1,1,1,1,1,1, 1,1,1,1,1,4, 1,1,1,1,4,4, 1,1,1,4,4,4, 1,1,4,4,4,4, 1,4,4,4,4,4,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        6,6,6,6,6,9, 6,6,6,6,9,9, 6,6,6,9,9,9, 6,6,9,9,9,9, 6,9,9,9,9,9, 9,9,9,9,9,9,
        4,4,4,4,4,4, 4,4,4,4,4,7, 4,4,4,4,7,7, 4,4,4,7,7,7, 4,4,7,7,7,7, 4,7,7,7,7,7,
        7,8,8,8,8,8, 7,7,8,8,8,8, 7,7,7,8,8,8, 7,7,7,7,8,8, 7,7,7,7,7,8, 7,7,7,7,7,7,
        8,9,9,9,9,9, 8,8,9,9,9,9, 8,8,8,9,9,9, 8,8,8,8,9,9, 8,8,8,8,8,9, 8,8,8,8,8,8
    },
    { // Frame 8
        2,2,2,2,2,3, 2,2,2,2,2,2, 1,2,2,2,2,2, 1,1,2,2,2,2, 1,1,1,2,2,2, 1,1,1,1,2,2,
        3,3,3,3,3,3, 3,3,3,3,3,3, 2,3,3,3,3,3, 2,2,3,3,3,3, 2,2,2,3,3,3, 2,2,2,2,3,6,
        3,3,3,3,6,6, 3,3,3,6,6,6, 3,3,6,6,6,6, 3,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,9,
        1,1,1,1,1,2, 1,1,1,1,1,1, 1,1,1,1,1,4, 1,1,1,1,4,4, 1,1,1,4,4,4, 1,1,4,4,4,4,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        6,6,6,6,9,9, 6,6,6,9,9,9, 6,6,9,9,9,9, 6,9,9,9,9,9, 9,9,9,9,9,9, 8,9,9,9,9,9,
        1,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,7, 4,4,4,4,7,7, 4,4,4,7,7,7, 4,4,7,7,7,7,
        4,7,8,8,8,8, 7,7,7,8,8,8, 7,7,7,7,8,8, 7,7,7,7,7,8, 7,7,7,7,7,7, 7,7,7,7,7,7,
        8,8,9,9,9,9, 8,8,8,9,9,9, 8,8,8,8,9,9, 8,8,8,8,8,9, 8,8,8,8,8,8, 7,8,8,8,8,8
    },
    { // Frame 9
        2,2,2,2,3,3, 2,2,2,2,2,3, 2,2,2,2,2,2, 1,2,2,2,2,2, 1,1,2,2,2,2, 1,1,1,2,2,2,
        3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 2,3,3,3,3,3, 2,2,3,3,3,6, 2,2,2,3,6,6,
        3,3,3,6,6,6, 3,3,6,6,6,6, 3,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,9, 6,6,6,6,9,9,
        1,1,1,1,2,2, 1,1,1,1,1,2, 1,1,1,1,1,1, 1,1,1,1,1,4, 1,1,1,1,4,4, 1,1,1,4,4,4,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        6,6,6,9,9,9, 6,6,9,9,9,9, 6,9,9,9,9,9, 9,9,9,9,9,9, 8,9,9,9,9,9, 8,8,9,9,9,9,
        1,1,4,4,4,4, 1,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,7, 4,4,4,4,7,7, 4,4,4,7,7,7,
        4,4,7,8,8,8, 4,7,7,7,8,8, 7,7,7,7,7,8, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7,
        8,8,8,9,9,9, 8,8,8,8,9,9, 8,8,8,8,8,9, 8,8,8,8,8,8, 7,8,8,8,8,8, 7,7,8,8,8,8
    },
    { // Frame 10
        2,2,2,3,3,3, 2,2,2,2,3,3, 2,2,2,2,2,3, 2,2,2,2,2,2, 1,2,2,2,2,2, 1,1,2,2,2,2,
        3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,6, 2,3,3,3,6,6, 2,2,3,6,6,6,
        3,3,6,6,6,6, 3,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,9, 6,6,6,6,9,9, 6,6,6,9,9,9,
        1,1,1,2,2,2, 1,1,1,1,2,2, 1,1,1,1,1,2, 1,1,1,1,1,1, 1,1,1,1,1,4, 1,1,1,1,4,4,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        6,6,9,9,9,9, 6,9,9,9,9,9, 9,9,9,9,9,9, 8,9,9,9,9,9, 8,8,9,9,9,9, 8,8,8,9,9,9,
        1,1,1,4,4,4, 1,1,4,4,4,4, 1,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,7, 4,4,4,4,7,7,
        4,4,4,7,8,8, 4,4,7,7,7,8, 4,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7,
        8,8,8,8,9,9, 8,8,8,8,8,9, 8,8,8,8,8,8, 7,8,8,8,8,8, 7,7,8,8,8,8, 7,7,7,8,8,8
    },
    { // Frame 11
        2,2,3,3,3,3, 2,2,2,3,3,3, 2,2,2,2,3,3, 2,2,2,2,2,3, 2,2,2,2,2,2, 1,2,2,2,2,2,
        3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,6, 3,3,3,3,6,6, 3,3,3,6,6,6, 2,3,6,6,6,6,
        3,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,9, 6,6,6,6,9,9, 6,6,6,9,9,9, 6,6,9,9,9,9,
        1,1,2,2,2,2, 1,1,1,2,2,2, 1,1,1,1,2,2, 1,1,1,1,1,2, 1,1,1,1,1,1, 1,1,1,1,1,4,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        6,9,9,9,9,9, 9,9,9,9,9,9, 8,9,9,9,9,9, 8,8,9,9,9,9, 8,8,8,9,9,9, 8,8,8,8,9,9,
        1,1,1,1,4,4, 1,1,1,4,4,4, 1,1,4,4,4,4, 1,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,7,
        4,4,4,4,7,8, 4,4,4,7,7,7, 4,4,7,7,7,7, 4,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7,
        8,8,8,8,8,9, 8,8,8,8,8,8, 7,8,8,8,8,8, 7,7,8,8,8,8, 7,7,7,8,8,8, 7,7,7,7,8,8
    },
    { // Frame 12
        2,3,3,3,3,3, 2,2,3,3,3,3, 2,2,2,3,3,3, 2,2,2,2,3,3, 2,2,2,2,2,3, 2,2,2,2,2,2,
        3,3,3,3,3,3, 3,3,3,3,3,6, 3,3,3,3,6,6, 3,3,3,6,6,6, 3,3,6,6,6,6, 3,6,6,6,6,6,
        6,6,6,6,6,6, 6,6,6,6,6,9, 6,6,6,6,9,9, 6,6,6,9,9,9, 6,6,9,9,9,9, 6,9,9,9,9,9,
        1,2,2,2,2,2, 1,1,2,2,2,2, 1,1,1,2,2,2, 1,1,1,1,2,2, 1,1,1,1,1,2, 1,1,1,1,1,1,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        9,9,9,9,9,9, 8,9,9,9,9,9, 8,8,9,9,9,9, 8,8,8,9,9,9, 8,8,8,8,9,9, 8,8,8,8,8,9,
        1,1,1,1,1,4, 1,1,1,1,4,4, 1,1,1,4,4,4, 1,1,4,4,4,4, 1,4,4,4,4,4, 4,4,4,4,4,4,
        4,4,4,4,4,7, 4,4,4,4,7,7, 4,4,4,7,7,7, 4,4,7,7,7,7, 4,7,7,7,7,7, 7,7,7,7,7,7,
        8,8,8,8,8,8, 7,8,8,8,8,8, 7,7,8,8,8,8, 7,7,7,8,8,8, 7,7,7,7,8,8, 7,7,7,7,7,8
    },
    { // Frame 13
        3,3,3,3,3,3, 2,3,3,3,3,3, 2,2,3,3,3,3, 2,2,2,3,3,3, 2,2,2,2,3,3, 2,2,2,2,2,3,
        3,3,3,3,3,6, 3,3,3,3,6,6, 3,3,3,6,6,6, 3,3,6,6,6,6, 3,6,6,6,6,6, 6,6,6,6,6,6,
        6,6,6,6,6,9, 6,6,6,6,9,9, 6,6,6,9,9,9, 6,6,9,9,9,9, 6,9,9,9,9,9, 9,9,9,9,9,9,
        2,2,2,2,2,2, 1,2,2,2,2,2, 1,1,2,2,2,2, 1,1,1,2,2,2, 1,1,1,1,2,2, 1,1,1,1,1,2,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        8,9,9,9,9,9, 8,8,9,9,9,9, 8,8,8,9,9,9, 8,8,8,8,9,9, 8,8,8,8,8,9, 8,8,8,8,8,8,
        1,1,1,1,1,1, 1,1,1,1,1,4, 1,1,1,1,4,4, 1,1,1,4,4,4, 1,1,4,4,4,4, 1,4,4,4,4,4,
        4,4,4,4,4,4, 4,4,4,4,4,7, 4,4,4,4,7,7, 4,4,4,7,7,7, 4,4,7,7,7,7, 4,7,7,7,7,7,
        7,8,8,8,8,8, 7,7,8,8,8,8, 7,7,7,8,8,8, 7,7,7,7,8,8, 7,7,7,7,7,8, 7,7,7,7,7,7
    },
    { // Frame 14
        3,3,3,3,3,3, 3,3,3,3,3,3, 2,3,3,3,3,3, 2,2,3,3,3,3, 2,2,2,3,3,3, 2,2,2,2,3,3,
        3,3,3,3,6,6, 3,3,3,6,6,6, 3,3,6,6,6,6, 3,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6,
        6,6,6,6,9,9, 6,6,6,9,9,9, 6,6,9,9,9,9, 6,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9,
        2,2,2,2,2,2, 2,2,2,2,2,2, 1,2,2,2,2,2, 1,1,2,2,2,2, 1,1,1,2,2,2, 1,1,1,1,2,2,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        8,8,9,9,9,9, 8,8,8,9,9,9, 8,8,8,8,9,9, 8,8,8,8,8,9, 8,8,8,8,8,8, 8,8,8,8,8,8,
        1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,4, 1,1,1,1,4,4, 1,1,1,4,4,4, 1,1,4,4,4,4,
        4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,7, 4,4,4,4,7,7, 4,4,4,7,7,7, 4,4,7,7,7,7,
        7,7,8,8,8,8, 7,7,7,8,8,8, 7,7,7,7,8,8, 7,7,7,7,7,8, 7,7,7,7,7,7, 7,7,7,7,7,7
    },
    { // Frame 15
        3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 2,3,3,3,3,3, 2,2,3,3,3,3, 2,2,2,3,3,3,
        3,3,3,6,6,6, 3,3,6,6,6,6, 3,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6,
        6,6,6,9,9,9, 6,6,9,9,9,9, 6,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9,
        2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 1,2,2,2,2,2, 1,1,2,2,2,2, 1,1,1,2,2,2,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        8,8,8,9,9,9, 8,8,8,8,9,9, 8,8,8,8,8,9, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8,
        1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,4, 1,1,1,1,4,4, 1,1,1,4,4,4,
        4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,7, 4,4,4,4,7,7, 4,4,4,7,7,7,
        7,7,7,8,8,8, 7,7,7,7,8,8, 7,7,7,7,7,8, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7
    },
    { // Frame 16
        3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 2,3,3,3,3,3, 2,2,3,3,3,3,
        3,3,6,6,6,6, 3,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6,
        6,6,9,9,9,9, 6,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9,
        2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 1,2,2,2,2,2, 1,1,2,2,2,2,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        8,8,8,8,9,9, 8,8,8,8,8,9, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8,
        1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,4, 1,1,1,1,4,4,
        4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,7, 4,4,4,4,7,7,
        7,7,7,7,8,8, 7,7,7,7,7,8, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7
    },
    { // Frame 17
        3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 2,3,3,3,3,3,
        3,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6,
        6,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9,
        2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 1,2,2,2,2,2,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        8,8,8,8,8,9, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8,
        1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,4,
        4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,7,
        7,7,7,7,7,8, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7
    },
    { // Frame 18
        3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3, 3,3,3,3,3,3,
        6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6, 6,6,6,6,6,6,
        9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9, 9,9,9,9,9,9,
        2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2, 2,2,2,2,2,2,
        5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5,
        8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8, 8,8,8,8,8,8,
        1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1, 1,1,1,1,1,1,
        4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4, 4,4,4,4,4,4,
        7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7, 7,7,7,7,7,7
    },
};

int edgeAnimationClockwise[19][4][18] = {

        { // Frame 0
                {10,10,10,10,10,10, 11,11,11,11,11,11, 12,12,12,12,12,12},
                {13,13,13,13,13,13, 14,14,14,14,14,14, 15,15,15,15,15,15},
                {16,16,16,16,16,16, 17,17,17,17,17,17, 18,18,18,18,18,18},
                {19,19,19,19,19,19, 20,20,20,20,20,20, 21,21,21,21,21,21}
        },
        { // Frame 1
                {21,10,10,10,10,10, 10,11,11,11,11,11, 11,12,12,12,12,12},
                {12,13,13,13,13,13, 13,14,14,14,14,14, 14,15,15,15,15,15},
                {15,16,16,16,16,16, 16,17,17,17,17,17, 17,18,18,18,18,18},
                {18,19,19,19,19,19, 19,20,20,20,20,20, 20,21,21,21,21,21}
        },
        { // Frame 2
                {21,21,10,10,10,10, 10,10,11,11,11,11, 11,11,12,12,12,12},
                {12,12,13,13,13,13, 13,13,14,14,14,14, 14,14,15,15,15,15},
                {15,15,16,16,16,16, 16,16,17,17,17,17, 17,17,18,18,18,18},
                {18,18,19,19,19,19, 19,19,20,20,20,20, 20,20,21,21,21,21}
        }, 
        { // Frame 3
                {21,21,21,10,10,10, 10,10,10,11,11,11, 11,11,11,12,12,12},
                {12,12,12,13,13,13, 13,13,13,14,14,14, 14,14,14,15,15,15},
                {15,15,15,16,16,16, 16,16,16,17,17,17, 17,17,17,18,18,18},
                {18,18,18,19,19,19, 19,19,19,20,20,20, 20,20,20,21,21,21}
        },
        { // Frame 4
                {21,21,21,21,10,10, 10,10,10,10,11,11, 11,11,11,11,12,12},
                {12,12,12,12,13,13, 13,13,13,13,14,14, 14,14,14,14,15,15},
                {15,15,15,15,16,16, 16,16,16,16,17,17, 17,17,17,17,18,18},
                {18,18,18,18,19,19, 19,19,19,19,20,20, 20,20,20,20,21,21}
        },
        { // Frame 5
                {21,21,21,21,21,10, 10,10,10,10,10,11, 11,11,11,11,11,12},
                {12,12,12,12,12,13, 13,13,13,13,13,14, 14,14,14,14,14,15},
                {15,15,15,15,15,16, 16,16,16,16,16,17, 17,17,17,17,17,18},
                {18,18,18,18,18,19, 19,19,19,19,19,20, 20,20,20,20,20,21}
        },
        { // Frame 6
                {21,21,21,21,21,21, 10,10,10,10,10,10, 11,11,11,11,11,11},
                {12,12,12,12,12,12, 13,13,13,13,13,13, 14,14,14,14,14,14},
                {15,15,15,15,15,15, 16,16,16,16,16,16, 17,17,17,17,17,17},
                {18,18,18,18,18,18, 19,19,19,19,19,19, 20,20,20,20,20,20}
        },
        { // Frame 7
                {20,21,21,21,21,21, 21,10,10,10,10,10, 10,11,11,11,11,11},
                {11,12,12,12,12,12, 12,13,13,13,13,13, 13,14,14,14,14,14},
                {14,15,15,15,15,15, 15,16,16,16,16,16, 16,17,17,17,17,17},
                {17,18,18,18,18,18, 18,19,19,19,19,19, 19,20,20,20,20,20}
        },
        { // Frame 8
                {20,20,21,21,21,21, 21,21,10,10,10,10, 10,10,11,11,11,11},
                {11,11,12,12,12,12, 12,12,13,13,13,13, 13,13,14,14,14,14},
                {14,14,15,15,15,15, 15,15,16,16,16,16, 16,16,17,17,17,17},
                {17,17,18,18,18,18, 18,18,19,19,19,19, 19,19,20,20,20,20}
        },
        { // Frame 9
                {20,20,20,21,21,21, 21,21,21,10,10,10, 10,10,10,11,11,11},
                {11,11,11,12,12,12, 12,12,12,13,13,13, 13,13,13,14,14,14},
                {14,14,14,15,15,15, 15,15,15,16,16,16, 16,16,16,17,17,17},
                {17,17,17,18,18,18, 18,18,18,19,19,19, 19,19,19,20,20,20}
        },
        { // Frame 10
                {20,20,20,20,21,21, 21,21,21,21,10,10, 10,10,10,10,11,11},
                {11,11,11,11,12,12, 12,12,12,12,13,13, 13,13,13,13,14,14},
                {14,14,14,14,15,15, 15,15,15,15,16,16, 16,16,16,16,17,17},
                {17,17,17,17,18,18, 18,18,18,18,19,19, 19,19,19,19,20,20}
        },
        { // Frame 11
                {20,20,20,20,20,21, 21,21,21,21,21,10, 10,10,10,10,10,11},
                {11,11,11,11,11,12, 12,12,12,12,12,13, 13,13,13,13,13,14},
                {14,14,14,14,14,15, 15,15,15,15,15,16, 16,16,16,16,16,17},
                {17,17,17,17,17,18, 18,18,18,18,18,19, 19,19,19,19,19,20}
        },
        { // Frame 12
                {20,20,20,20,20,20, 21,21,21,21,21,21, 10,10,10,10,10,10},
                {11,11,11,11,11,11, 12,12,12,12,12,12, 13,13,13,13,13,13},
                {14,14,14,14,14,14, 15,15,15,15,15,15, 16,16,16,16,16,16},
                {17,17,17,17,17,17, 18,18,18,18,18,18, 19,19,19,19,19,19}
        },
        { // Frame 13
                {19,20,20,20,20,20, 20,21,21,21,21,21, 21,10,10,10,10,10},
                {10,11,11,11,11,11, 11,12,12,12,12,12, 12,13,13,13,13,13},
                {13,14,14,14,14,14, 14,15,15,15,15,15, 15,16,16,16,16,16},
                {16,17,17,17,17,17, 17,18,18,18,18,18, 18,19,19,19,19,19}
        },
        { // Frame 14
                {19,19,20,20,20,20, 20,20,21,21,21,21, 21,21,10,10,10,10},
                {10,10,11,11,11,11, 11,11,12,12,12,12, 12,12,13,13,13,13},
                {13,13,14,14,14,14, 14,14,15,15,15,15, 15,15,16,16,16,16},
                {16,16,17,17,17,17, 17,17,18,18,18,18, 18,18,19,19,19,19}
        },
        { // Frame 15
                {19,19,19,20,20,20, 20,20,20,21,21,21, 21,21,21,10,10,10},
                {10,10,10,11,11,11, 11,11,11,12,12,12, 12,12,12,13,13,13},
                {13,13,13,14,14,14, 14,14,14,15,15,15, 15,15,15,16,16,16},
                {16,16,16,17,17,17, 17,17,17,18,18,18, 18,18,18,19,19,19}
        },
        { // Frame 16
                {19,19,19,19,20,20, 20,20,20,20,21,21, 21,21,21,21,10,10},
                {10,10,10,10,11,11, 11,11,11,11,12,12, 12,12,12,12,13,13},
                {13,13,13,13,14,14, 14,14,14,14,15,15, 15,15,15,15,16,16},
                {16,16,16,16,17,17, 17,17,17,17,18,18, 18,18,18,18,19,19}
        },
        { // Frame 17
                {19,19,19,19,19,20, 20,20,20,20,20,21, 21,21,21,21,21,10},
                {10,10,10,10,10,11, 11,11,11,11,11,12, 12,12,12,12,12,13},
                {13,13,13,13,13,14, 14,14,14,14,14,15, 15,15,15,15,15,16},
                {16,16,16,16,16,17, 17,17,17,17,17,18, 18,18,18,18,18,19}
        },
        { // Frame 18
                {19,19,19,19,19,19, 20,20,20,20,20,20, 21,21,21,21,21,21},
                {10,10,10,10,10,10, 11,11,11,11,11,11, 12,12,12,12,12,12},
                {13,13,13,13,13,13, 14,14,14,14,14,14, 15,15,15,15,15,15},
                {16,16,16,16,16,16, 17,17,17,17,17,17, 18,18,18,18,18,18}
        }
};

int edgeAnimationCounterClockwise[19][4][18] = {   
       { // Frame 0
               {10,10,10,10,10,10, 11,11,11,11,11,11, 12,12,12,12,12,12},
               {13,13,13,13,13,13, 14,14,14,14,14,14, 15,15,15,15,15,15},
               {16,16,16,16,16,16, 17,17,17,17,17,17, 18,18,18,18,18,18},
               {19,19,19,19,19,19, 20,20,20,20,20,20, 21,21,21,21,21,21}
       },
       { // Frame 1
               {10,10,10,10,10,11, 11,11,11,11,11,12, 12,12,12,12,12,13},
               {13,13,13,13,13,14, 14,14,14,14,14,15, 15,15,15,15,15,16},
               {16,16,16,16,16,17, 17,17,17,17,17,18, 18,18,18,18,18,19},
               {19,19,19,19,19,20, 20,20,20,20,20,21, 21,21,21,21,21,10}
       },
       { // Frame 2
               {10,10,10,10,11,11, 11,11,11,11,12,12, 12,12,12,12,13,13},
               {13,13,13,13,14,14, 14,14,14,14,15,15, 15,15,15,15,16,16},
               {16,16,16,16,17,17, 17,17,17,17,18,18, 18,18,18,18,19,19},
               {19,19,19,19,20,20, 20,20,20,20,21,21, 21,21,21,21,10,10}
       },
       { // Frame 3
               {10,10,10,11,11,11, 11,11,11,12,12,12, 12,12,12,13,13,13},
               {13,13,13,14,14,14, 14,14,14,15,15,15, 15,15,15,16,16,16},
               {16,16,16,17,17,17, 17,17,17,18,18,18, 18,18,18,19,19,19},
               {19,19,19,20,20,20, 20,20,20,21,21,21, 21,21,21,10,10,10}
       },
       { // Frame 4
               {10,10,11,11,11,11, 11,11,12,12,12,12, 12,12,13,13,13,13},
               {13,13,14,14,14,14, 14,14,15,15,15,15, 15,15,16,16,16,16},
               {16,16,17,17,17,17, 17,17,18,18,18,18, 18,18,19,19,19,19},
               {19,19,20,20,20,20, 20,20,21,21,21,21, 21,21,10,10,10,10}
       },
       { // Frame 5
               {10,11,11,11,11,11, 11,12,12,12,12,12, 12,13,13,13,13,13},
               {13,14,14,14,14,14, 14,15,15,15,15,15, 15,16,16,16,16,16},
               {16,17,17,17,17,17, 17,18,18,18,18,18, 18,19,19,19,19,19},
               {19,20,20,20,20,20, 20,21,21,21,21,21, 21,10,10,10,10,10}
       },
       { // Frame 6
               {11,11,11,11,11,11, 12,12,12,12,12,12, 13,13,13,13,13,13},
               {14,14,14,14,14,14, 15,15,15,15,15,15, 16,16,16,16,16,16},
               {17,17,17,17,17,17, 18,18,18,18,18,18, 19,19,19,19,19,19},
               {20,20,20,20,20,20, 21,21,21,21,21,21, 10,10,10,10,10,10}
       },
       { // Frame 7
               {11,11,11,11,11,12, 12,12,12,12,12,13, 13,13,13,13,13,14},
               {14,14,14,14,14,15, 15,15,15,15,15,16, 16,16,16,16,16,17},
               {17,17,17,17,17,18, 18,18,18,18,18,19, 19,19,19,19,19,20},
               {20,20,20,20,20,21, 21,21,21,21,21,10, 10,10,10,10,10,11}
       },
       { // Frame 8
               {11,11,11,11,12,12, 12,12,12,12,13,13, 13,13,13,13,14,14},
               {14,14,14,14,15,15, 15,15,15,15,16,16, 16,16,16,16,17,17},
               {17,17,17,17,18,18, 18,18,18,18,19,19, 19,19,19,19,20,20},
               {20,20,20,20,21,21, 21,21,21,21,10,10, 10,10,10,10,11,11}
       },
       { // Frame 9
               {11,11,11,12,12,12, 12,12,12,13,13,13, 13,13,13,14,14,14},
               {14,14,14,15,15,15, 15,15,15,16,16,16, 16,16,16,17,17,17},
               {17,17,17,18,18,18, 18,18,18,19,19,19, 19,19,19,20,20,20},
               {20,20,20,21,21,21, 21,21,21,10,10,10, 10,10,10,11,11,11}
       },
       { // Frame 10
               {11,11,12,12,12,12, 12,12,13,13,13,13, 13,13,14,14,14,14},
               {14,14,15,15,15,15, 15,15,16,16,16,16, 16,16,17,17,17,17},
               {17,17,18,18,18,18, 18,18,19,19,19,19, 19,19,20,20,20,20},
               {20,20,21,21,21,21, 21,21,10,10,10,10, 10,10,11,11,11,11}
       },
       { // Frame 11
               {11,12,12,12,12,12, 12,13,13,13,13,13, 13,14,14,14,14,14},
               {14,15,15,15,15,15, 15,16,16,16,16,16, 16,17,17,17,17,17},
               {17,18,18,18,18,18, 18,19,19,19,19,19, 19,20,20,20,20,20},
               {20,21,21,21,21,21, 21,10,10,10,10,10, 10,11,11,11,11,11}
       },
       { // Frame 12
               {12,12,12,12,12,12, 13,13,13,13,13,13, 14,14,14,14,14,14},
               {15,15,15,15,15,15, 16,16,16,16,16,16, 17,17,17,17,17,17},
               {18,18,18,18,18,18, 19,19,19,19,19,19, 20,20,20,20,20,20},
               {21,21,21,21,21,21, 10,10,10,10,10,10, 11,11,11,11,11,11}
       },
       { // Frame 13
               {12,12,12,12,12,13, 13,13,13,13,13,14, 14,14,14,14,14,15},
               {15,15,15,15,15,16, 16,16,16,16,16,17, 17,17,17,17,17,18},
               {18,18,18,18,18,19, 19,19,19,19,19,20, 20,20,20,20,20,21},
               {21,21,21,21,21,10, 10,10,10,10,10,11, 11,11,11,11,11,12}
       },
       { // Frame 14
               {12,12,12,12,13,13, 13,13,13,13,14,14, 14,14,14,14,15,15},
               {15,15,15,15,16,16, 16,16,16,16,17,17, 17,17,17,17,18,18},
               {18,18,18,18,19,19, 19,19,19,19,20,20, 20,20,20,20,21,21},
               {21,21,21,21,10,10, 10,10,10,10,11,11, 11,11,11,11,12,12}
       },
       { // Frame 15
               {12,12,12,13,13,13, 13,13,13,14,14,14, 14,14,14,15,15,15},
               {15,15,15,16,16,16, 16,16,16,17,17,17, 17,17,17,18,18,18},
               {18,18,18,19,19,19, 19,19,19,20,20,20, 20,20,20,21,21,21},
               {21,21,21,10,10,10, 10,10,10,11,11,11, 11,11,11,12,12,12}
       },
       { // Frame 16
               {12,12,13,13,13,13, 13,13,14,14,14,14, 14,14,15,15,15,15},
               {15,15,16,16,16,16, 16,16,17,17,17,17, 17,17,18,18,18,18},
               {18,18,19,19,19,19, 19,19,20,20,20,20, 20,20,21,21,21,21},
               {21,21,10,10,10,10, 10,10,11,11,11,11, 11,11,12,12,12,12}
       },    
       { // Frame 17
               {12,13,13,13,13,13, 13,14,14,14,14,14, 14,15,15,15,15,15},
               {15,16,16,16,16,16, 16,17,17,17,17,17, 17,18,18,18,18,18},
               {18,19,19,19,19,19, 19,20,20,20,20,20, 20,21,21,21,21,21},
               {21,10,10,10,10,10, 10,11,11,11,11,11, 11,12,12,12,12,12}
       },
       { // Frame 18
               {13,13,13,13,13,13, 14,14,14,14,14,14, 15,15,15,15,15,15},
               {16,16,16,16,16,16, 17,17,17,17,17,17, 18,18,18,18,18,18},
               {19,19,19,19,19,19, 20,20,20,20,20,20, 21,21,21,21,21,21},
               {10,10,10,10,10,10, 11,11,11,11,11,11, 12,12,12,12,12,12}
       }
};

// SETUP FUNCTION----------------------------------
void setup() {
    front.begin();
    front.setBrightness(64); // 1/3 brightness

    right.begin(); 
    right.setBrightness(64);

    up.begin();
    up.setBrightness(64);

    left.begin();
    left.setBrightness(64);

    back.begin();
    back.setBrightness(64);

    down.begin();
    down.setBrightness(64);
    // Uncomment the above when we have more faces ready
    
}
// END SETUP FUNCTION------------------------------




// LOOP FUNCTION-----------------------------------
void loop() {


    // // Show the face matrix
    // showFace(front, faceMatrix);
    // front.show();

    // // Show the animation
    // showAnimation(front, animationClockwise, faceMatrix);

    // // Wait
    // delay(2000);

    // // Update the values of the matrix
    // turnFaceClockwise(faceMatrix);

    char notationList[20] = "FfFfFfFfFfFfFfFfFf";

    displayCubeNotationAnimation(cubeState, notationList);


  

  
}
// END LOOP FUNCTION-------------------------------




// SETPANELCOLOR FUNCTION---------------------------------
void setPanelColor(Adafruit_NeoMatrix& face, int panelNum, uint32_t color) {

    // setPanelColor: Fills a solid color on one panel of a face.
    // Arguments: Neopixel object pointer, number of panel to change, and a color value

    for (int i=0; i<9; i++) {
        face.setPixelColor(i + (panelNum * LEDS_PER_PANEL), color);
    }

}
// END SETPANELCOLOR FUNCTION---------------------




// SHOWFACE FUNCTION----------------------------------------
void showFace(Adafruit_NeoMatrix& face, int *matrix) {

    // showFace: Shows a 3x3 matrix on one face.
    // Arguments: Neopixel object pointer, a 3x3 matrix of color values

    for (int i=0; i<9; i++) { 
        uint32_t color;
        if (matrix[i] == 1) {
            color = RED;
        } else if (matrix[i] == 2) {
            color = GREEN;
        } else if (matrix[i] == 3) {
            color = BLUE;
        } else if (matrix[i] == 4) {
            color = WHITE;
        } else if (matrix[i] == 5) {
            color = ORANGE;
        } else if (matrix[i] == 6) {
            color = YELLOW;
        }
        setPanelColor(face, i, color);
    }
  
}
// END SHOWFACE FUNCTION----------------------------------------





// FILLPANELCOLOR FUNCTION---------------------------------
void fillPanelColor(Adafruit_NeoMatrix& face, uint32_t color) {

    // fillPanelColor: Extends setPanelColor to fill a solid color on an entire face.
    // Arguments: Neopixel object pointer and a color value

    for (int i=0; i<9; i++) {
        setPanelColor(face, i, color);
    }

}
// END FILLPANELCOLOR FUNCTION-----------------------------




// SETPATTERN FUNCTION-------------------------------------
void setPattern(Adafruit_NeoMatrix& face, int panelNum, int matrix[36], uint32_t color1, uint32_t color2) {

    // setPattern: Shows a 6x6 pattern on one panel of a face.
    // Arguments: Neopixel object pointer, number of panel to change, a matrix value, a color for a '1' value, and a color for a '2' value.

    // Loop through the matrix
    for (int i=0; i<35; i++) {

        // What color should the pixel be?

        if (matrix[i] == 1) {
            face.setPixelColor(i + (panelNum * LEDS_PER_PANEL), color1);
        } else if (matrix[i] == 2) {
            face.setPixelColor(i + (panelNum * LEDS_PER_PANEL), color2);
        } else {
            // Blank
            face.setPixelColor(i + (panelNum * LEDS_PER_PANEL), face.Color(0, 0, 0));
        }
    }
}



// FILLPATTERN FUNCTION------------------------------------
void fillPattern(Adafruit_NeoMatrix& face, int matrix[36], uint32_t color1, uint32_t color2) {

    // fillPattern: Shows a 6x6 pattern on all 9 panels of a face.
    // Arguments: Neopixel object pointer, a matrix value, a color for a '1' value, and a color for a '2' value.

    for (int i=0; i<9; i++) {
        setPattern(face, i, matrix, color1, color2);
    }

}
// END FILLPATTERN FUNCTION--------------------------------




// WHEEL FUNCTION------------------------------------------
// Input a value 0 to 255 to get a color value.
// The colors are a transition r - g - b - back to r.
uint32_t Wheel(byte WheelPos) {
    WheelPos = 255 - WheelPos;
    if(WheelPos < 85)
    {
        return front.Color(255 - WheelPos * 3, 0, WheelPos * 3);
    }
    else if(WheelPos < 170)
    {
        WheelPos -= 85;
        return front.Color(0, WheelPos * 3, 255 - WheelPos * 3);
    }
    else
    {
        WheelPos -= 170;
        return front.Color(WheelPos * 3, 255 - WheelPos * 3, 0);
    }
}
// END WHEEL FUNCTION--------------------------------------



// FUNCTIONS FOR TURNING MATRICES -------------------------------------------------
void turnFaceClockwise(int matrix[6][9], int faceToTurn) {

    // This function turns one face of a matrix clockwise.
    // By the end of this function, the cubeState variable should 
    // contain an altered matrix. 

    // faceToTurn contains an integer from 0 to 5 that specifies which face gets turned.

    int panelOffset = faceToTurn * 9;


    int matrix2[6][9];



    // Make an altered matrix, changing the turned face in question
    matrix2[faceToTurn][0] = matrix[faceToTurn][6];
    matrix2[faceToTurn][1] = matrix[faceToTurn][3];
    matrix2[faceToTurn][2] = matrix[faceToTurn][0];
    matrix2[faceToTurn][3] = matrix[faceToTurn][7];
    matrix2[faceToTurn][4] = matrix[faceToTurn][4];
    matrix2[faceToTurn][5] = matrix[faceToTurn][1];
    matrix2[faceToTurn][6] = matrix[faceToTurn][8];
    matrix2[faceToTurn][7] = matrix[faceToTurn][5];
    matrix2[faceToTurn][8] = matrix[faceToTurn][2];

    // Special cases for turning the edges around
    if (faceToTurn == 0) {
        
        matrix2[1][8] = matrix[2][8];
        matrix2[1][6] = matrix[2][7];
        matrix2[1][7] = matrix[2][6];
        matrix2[2][8] = matrix[3][8];
        matrix2[2][7] = matrix[3][7];
        matrix2[2][6] = matrix[3][6];
        matrix2[3][8] = matrix[4][8];
        matrix2[3][7] = matrix[4][7];
        matrix2[3][6] = matrix[4][6];
        matrix2[4][8] = matrix[1][8];
        matrix2[4][7] = matrix[1][7];
        matrix2[4][6] = matrix[1][6];

    } else if (faceToTurn == 1) {

        matrix2[0][0] = matrix[2][2];
        matrix2[0][1] = matrix[2][5];
        matrix2[0][2] = matrix[2][8];
        matrix2[2][2] = matrix[5][8];
        matrix2[2][5] = matrix[5][7];
        matrix2[2][8] = matrix[5][6];
        matrix2[5][8] = matrix[4][6];
        matrix2[5][7] = matrix[4][3];
        matrix2[5][6] = matrix[4][0];
        matrix2[4][6] = matrix[0][0];
        matrix2[4][3] = matrix[0][1];
        matrix2[4][0] = matrix[0][2];

    } else if (faceToTurn == 2) {

        matrix2[0][2] = matrix[1][2];
        matrix2[0][5] = matrix[1][5];
        matrix2[0][8] = matrix[1][8];
        matrix2[1][2] = matrix[5][2];
        matrix2[1][5] = matrix[5][5];
        matrix2[1][8] = matrix[5][8];
        matrix2[5][2] = matrix[3][6];
        matrix2[5][5] = matrix[3][3];
        matrix2[5][8] = matrix[3][0];
        matrix2[3][6] = matrix[0][2];
        matrix2[3][3] = matrix[0][5];
        matrix2[3][0] = matrix[0][8];
    
    } else if (faceToTurn == 3) {

        matrix2[0][8] = matrix[2][2];
        matrix2[0][7] = matrix[2][5];
        matrix2[0][6] = matrix[2][8];
        matrix2[2][2] = matrix[5][0];
        matrix2[2][5] = matrix[5][1];
        matrix2[2][8] = matrix[5][2];
        matrix2[5][0] = matrix[4][6];
        matrix2[5][1] = matrix[4][3];
        matrix2[5][2] = matrix[4][0];
        matrix2[4][6] = matrix[0][8];
        matrix2[4][3] = matrix[0][7];
        matrix2[4][0] = matrix[0][6];

    } else if (faceToTurn == 4) {

        matrix2[0][0] = matrix[1][0];
        matrix2[0][3] = matrix[1][3];
        matrix2[0][6] = matrix[1][6];
        matrix2[1][0] = matrix[5][0];
        matrix2[1][3] = matrix[5][3];
        matrix2[1][6] = matrix[5][6];
        matrix2[5][0] = matrix[3][8];
        matrix2[5][3] = matrix[3][5];
        matrix2[5][6] = matrix[3][2];
        matrix2[3][8] = matrix[0][0];
        matrix2[3][5] = matrix[0][3];
        matrix2[3][2] = matrix[0][6];

    } else if (faceToTurn == 5) {
        
        matrix2[1][0] = matrix[4][0];
        matrix2[1][1] = matrix[4][1];
        matrix2[1][2] = matrix[4][2];
        matrix2[4][0] = matrix[3][0];
        matrix2[4][1] = matrix[3][1];
        matrix2[4][2] = matrix[3][2];
        matrix2[3][0] = matrix[2][0];
        matrix2[3][1] = matrix[2][1];
        matrix2[3][2] = matrix[2][2];
        matrix2[2][0] = matrix[1][0];
        matrix2[2][1] = matrix[1][1];
        matrix2[2][2] = matrix[1][2];

    }
    
        
    
    //Change the original values of matrix to the rotated ones
    for (int i=0; i<6; i++) {
        for (int j=0; j<9; j++) {
            matrix[i][j] = matrix2[i][j];
        }
        
    }
    
   //memcpy (matrix, matrix2, sizeof(matrix));

}


void turnFaceCounterClockwise(int matrix[6][9], int faceToTurn) {

    // This function turns one face of a matrix counter clockwise.
    // By the end of this function, the cubeState variable should 
    // contain an altered matrix. 

    // faceToTurn contains an integer from 0 to 5 that specifies which face gets turned.

    int panelOffset = faceToTurn * 9;


    int matrix2[6][9];
    matrix2[faceToTurn][0] = matrix[faceToTurn][2];
    matrix2[faceToTurn][1] = matrix[faceToTurn][5];
    matrix2[faceToTurn][2] = matrix[faceToTurn][8];
    matrix2[faceToTurn][3] = matrix[faceToTurn][1];
    matrix2[faceToTurn][4] = matrix[faceToTurn][4];
    matrix2[faceToTurn][5] = matrix[faceToTurn][7];
    matrix2[faceToTurn][6] = matrix[faceToTurn][0];
    matrix2[faceToTurn][7] = matrix[faceToTurn][3];
    matrix2[faceToTurn][8] = matrix[faceToTurn][6];



    if (faceToTurn == 0) {

        matrix2[1][6] = matrix[4][6];
        matrix2[1][7] = matrix[4][7];
        matrix2[1][8] = matrix[4][8];
        matrix2[4][6] = matrix[3][6];
        matrix2[4][7] = matrix[3][7];
        matrix2[4][8] = matrix[3][8];
        matrix2[3][6] = matrix[2][6];
        matrix2[3][7] = matrix[2][7];
        matrix2[3][8] = matrix[2][8];
        matrix2[2][6] = matrix[1][6];
        matrix2[2][7] = matrix[1][7];
        matrix2[2][8] = matrix[1][8];
    }
    else if (faceToTurn == 1) {

        matrix2[0][2] = matrix[2][0];
        matrix2[0][1] = matrix[2][3];
        matrix2[0][0] = matrix[2][6];
        matrix2[2][0] = matrix[5][6];
        matrix2[2][3] = matrix[5][7];
        matrix2[2][6] = matrix[5][8];
        matrix2[5][6] = matrix[4][8];
        matrix2[5][7] = matrix[4][5];
        matrix2[5][8] = matrix[4][2];
        matrix2[4][8] = matrix[0][2];
        matrix2[4][5] = matrix[0][1];
        matrix2[4][2] = matrix[0][0];
    }
    else if (faceToTurn == 2) {

        matrix2[0][8] = matrix[3][0];
        matrix2[0][5] = matrix[3][3];
        matrix2[0][2] = matrix[3][6];
        matrix2[3][0] = matrix[5][8];
        matrix2[3][3] = matrix[5][5];
        matrix2[3][6] = matrix[5][2];
        matrix2[5][8] = matrix[1][8];
        matrix2[5][5] = matrix[1][5];
        matrix2[5][2] = matrix[1][2];
        matrix2[1][8] = matrix[0][8];
        matrix2[1][5] = matrix[0][5];
        matrix2[1][2] = matrix[0][2];
    }
    else if (faceToTurn == 3) {

        matrix2[0][6] = matrix[4][0];
        matrix2[0][7] = matrix[4][3];
        matrix2[0][8] = matrix[4][6];
        matrix2[4][0] = matrix[5][2];
        matrix2[4][3] = matrix[5][1];
        matrix2[4][6] = matrix[5][0];
        matrix2[5][2] = matrix[2][8];
        matrix2[5][1] = matrix[2][5];
        matrix2[5][0] = matrix[2][2];
        matrix2[2][8] = matrix[0][6];
        matrix2[2][5] = matrix[0][7];
        matrix2[2][2] = matrix[0][8];
    }
    else if (faceToTurn == 4) {
        
        matrix2[0][0] = matrix[1][0];
        matrix2[0][3] = matrix[1][3];
        matrix2[0][6] = matrix[1][6];
        matrix2[1][0] = matrix[5][0];
        matrix2[1][3] = matrix[5][3];
        matrix2[1][6] = matrix[5][6];
        matrix2[5][0] = matrix[3][8];
        matrix2[5][3] = matrix[3][5];
        matrix2[5][6] = matrix[3][2];
        matrix2[3][8] = matrix[0][0];
        matrix2[3][5] = matrix[0][3];
        matrix2[3][2] = matrix[0][6];
    }
    else if (faceToTurn == 5) {
        matrix2[1][2] = matrix[2][2];
        matrix2[1][1] = matrix[2][1];
        matrix2[1][0] = matrix[2][0];
        matrix2[2][2] = matrix[3][2];
        matrix2[2][1] = matrix[3][1];
        matrix2[2][0] = matrix[3][0];
        matrix2[3][2] = matrix[4][2];
        matrix2[3][1] = matrix[4][1];
        matrix2[3][0] = matrix[4][0];
        matrix2[4][2] = matrix[1][2];
        matrix2[4][1] = matrix[1][1];
        matrix2[4][0] = matrix[1][0];
    }

} 
// -------------------------------------------------------------------------------


// The cube notation sent will be in a string:
// Uppercase letters stand for clockwise, lowercase for counterclockwise
void displayCubeNotationAnimation(int cubeState[6][9], char *notation) {


    //displayCubeNotationAnimation: Shows a full Rubik's Cube solve.

    front.clear();
    right.clear();
    up.clear();
    left.clear();
    back.clear();
    down.clear();

    //int edgeArray[12];

    for (int strpos=0; strpos<strlen(notation); strpos++) {
        char character = notation[strpos];

        if (character == 'F') {

            int edgeArray[12] = { // Top, right, bottom, left
                cubeState[5][6], cubeState[5][7], cubeState[5][8],
                cubeState[2][0], cubeState[2][3], cubeState[2][6],
                cubeState[0][2], cubeState[0][1], cubeState[0][0],
                cubeState[4][8], cubeState[4][5], cubeState[4][2]};

            // Shows the animation
            showAnimation(front,
                1,
                animationClockwise,
                edgeAnimationClockwise,
                cubeState[1], // Front is face 1
                edgeArray
                );
            // Alters the cubeState variable
            turnFaceClockwise(cubeState, 1);

        } else if (character == 'f') {
            
            int edgeArray[12] = { // Top, right, bottom, left
                cubeState[5][6], cubeState[5][7], cubeState[5][8],
                cubeState[2][0], cubeState[2][3], cubeState[2][6],
                cubeState[0][2], cubeState[0][1], cubeState[0][0],
                cubeState[4][8], cubeState[4][5], cubeState[4][2]};

            // Shows the animation
            showAnimation(front,
                1,
                animationCounterClockwise,
                edgeAnimationCounterClockwise,
                cubeState[1], // Front is face 1
                edgeArray
                );
            // Alters the cubeState variable
            turnFaceCounterClockwise(cubeState, 1);

        } else if (character == 'R') {
            
            
            int edgeArray[12] = { // Top, back, bottom, front
                cubeState[5][8], cubeState[5][5], cubeState[5][2],
                cubeState[3][0], cubeState[3][3], cubeState[3][6],
                cubeState[0][8], cubeState[0][5], cubeState[0][2],
                cubeState[1][8], cubeState[1][5], cubeState[1][2]};

            // Shows the animation
            showAnimation(right,
                2,
                animationClockwise,
                edgeAnimationClockwise,
                cubeState[2], // Right is face 2
                edgeArray
                );
            // Alters the cubeState variable
            turnFaceClockwise(cubeState, 2);


        } else if (character == 'r') {
            
            

            int edgeArray[12] = { // Top, back, bottom, front
                cubeState[5][8], cubeState[5][5], cubeState[5][2],
                cubeState[3][0], cubeState[3][3], cubeState[3][6],
                cubeState[0][8], cubeState[0][5], cubeState[0][2],
                cubeState[1][8], cubeState[1][5], cubeState[1][2]};

            // Shows the animation
            showAnimation(right,
                2,
                animationCounterClockwise,
                edgeAnimationCounterClockwise,
                cubeState[2], // Right is face 2
                edgeArray
                );
            // Alters the cubeState variable
            turnFaceCounterClockwise(cubeState, 2);



        } else if (character == 'U') {
            
            
            int edgeArray[12] = { // back, right, front, left
                cubeState[3][6], cubeState[3][7], cubeState[3][8],
                cubeState[2][2], cubeState[2][1], cubeState[2][0],
                cubeState[1][2], cubeState[1][1], cubeState[1][0],
                cubeState[4][2], cubeState[4][1], cubeState[4][0]};

            // Shows the animation
            showAnimation(up,
                5,
                animationClockwise,
                edgeAnimationClockwise,
                cubeState[5], // Up is face 5
                edgeArray
                );
            // Alters the cubeState variable
            turnFaceClockwise(cubeState, 5);

        } else if (character == 'u') {
            
            
            int edgeArray[12] = { // back, right, front, left
                cubeState[3][6], cubeState[3][7], cubeState[3][8],
                cubeState[2][2], cubeState[2][1], cubeState[2][0],
                cubeState[1][2], cubeState[1][1], cubeState[1][0],
                cubeState[4][2], cubeState[4][1], cubeState[4][0]};

            // Shows the animation
            showAnimation(front,
                5,
                animationCounterClockwise,
                edgeAnimationCounterClockwise,
                cubeState[5], // Top is face 5
                edgeArray
                );
            // Alters the cubeState variable
            turnFaceCounterClockwise(cubeState, 5);


        } else if (character == 'L') {
            
            
            int edgeArray[12] = { // top, front, down, back
                cubeState[5][0], cubeState[5][3], cubeState[5][6],
                cubeState[1][0], cubeState[1][3], cubeState[1][6],
                cubeState[0][0], cubeState[0][3], cubeState[0][6],
                cubeState[3][2], cubeState[3][5], cubeState[3][8]};

            // Shows the animation
            showAnimation(front,
                4,
                animationClockwise,
                edgeAnimationClockwise,
                cubeState[4], // Left is face 4
                edgeArray
                );
            // Alters the cubeState variable
            turnFaceClockwise(cubeState, 4);



        } else if (character == 'l') {
            
            
            int edgeArray[12] = { // top, down, front, back
                cubeState[5][0], cubeState[5][3], cubeState[5][6],
                cubeState[1][0], cubeState[1][3], cubeState[1][6],
                cubeState[0][0], cubeState[0][3], cubeState[0][6],
                cubeState[3][2], cubeState[3][5], cubeState[3][8]};

            // Shows the animation
            showAnimation(front,
                4,
                animationCounterClockwise,
                edgeAnimationCounterClockwise,
                cubeState[4], // Left is face 4
                edgeArray
                );
            // Alters the cubeState variable
            turnFaceCounterClockwise(cubeState, 4);


        } else if (character == 'B') {
            
            
            int edgeArray[12] = { // top, right, down, left
                cubeState[5][2], cubeState[5][1], cubeState[5][0],
                cubeState[4][0], cubeState[4][3], cubeState[4][6],
                cubeState[0][6], cubeState[0][7], cubeState[0][8],
                cubeState[2][8], cubeState[2][5], cubeState[2][2]};

            // Shows the animation
            showAnimation(front,
                3,
                animationClockwise,
                edgeAnimationClockwise,
                cubeState[3], // Back is face 3
                edgeArray
                );
            // Alters the cubeState variable
            turnFaceClockwise(cubeState, 3);


        } else if (character == 'b') {
            
            
            int edgeArray[12] = { // top, right, down, left
                cubeState[5][2], cubeState[5][1], cubeState[5][0],
                cubeState[4][0], cubeState[4][3], cubeState[4][6],
                cubeState[0][6], cubeState[0][7], cubeState[0][8],
                cubeState[2][8], cubeState[2][5], cubeState[2][2]};

            // Shows the animation
            showAnimation(front,
                3,
                animationCounterClockwise,
                edgeAnimationCounterClockwise,
                cubeState[3], // Back is face 3
                edgeArray
                );
            // Alters the cubeState variable
            turnFaceCounterClockwise(cubeState, 3);


        } else if (character == 'D') {
             
             
            int edgeArray[12] = { // front, right, back, left
                cubeState[1][6], cubeState[1][7], cubeState[1][8],
                cubeState[2][6], cubeState[2][7], cubeState[2][8],
                cubeState[3][6], cubeState[3][7], cubeState[3][8],
                cubeState[4][6], cubeState[4][7], cubeState[4][8]};

            // Shows the animation
            showAnimation(front,
                0,
                animationClockwise,
                edgeAnimationClockwise,
                cubeState[0], // Down is face 0
                edgeArray
                );
            // Alters the cubeState variable
            turnFaceClockwise(cubeState, 0);


        } else if (character == 'd') {
    

            int edgeArray[12] = { // front, right, back, left
                cubeState[1][6], cubeState[1][7], cubeState[1][8],
                cubeState[2][6], cubeState[2][7], cubeState[2][8],
                cubeState[3][6], cubeState[3][7], cubeState[3][8],
                cubeState[4][6], cubeState[4][7], cubeState[4][8]};

            // Shows the animation
            showAnimation(front,
                0,
                animationCounterClockwise,
                edgeAnimationCounterClockwise,
                cubeState[0], // Down is face 0
                edgeArray
                );
            // Alters the cubeState variable
            turnFaceCounterClockwise(cubeState, 0);

        }

        delay(1000);

    }
}

void showAnimation(
    Adafruit_NeoMatrix& face, // What face are we turning
    int faceNum, // Numerical identifier for face
    int animationMatrix[18][324], // Constant animation data
    int edgeAnimation[18][4][18], // Constant animation data
    int *faceMatrix, // Dynamic state of front (324)
    int *edgeMatrix) // Dynamic state of edges (12)
    {


    // Initialize local variables
    int frontFaceValues[324];
    int upFaceValues[324];
    int rightFaceValues[324];
    int leftFaceValues[324];
    int backFaceValues[324];
    int downFaceValues[324];
    int originalPanelNumber;
    int originalPanelColor;
    int originalEdgeColor;
    int index;


    // Every frame: 
    for (int frameNum=0; frameNum<18; frameNum++) {

    

        // This part changes the EDGES /////////////////////////////////////
        if (faceNum == 1) { // front
            // generate matrix of up face values (18x18)
            generateEdgeAnimationOneFace(upFaceValues, 2, edgeAnimation[frameNum][0]);
            // generate matrix of right face values
            generateEdgeAnimationOneFace(rightFaceValues, 3, edgeAnimation[frameNum][1]);
            // generate matrix of down face values
            generateEdgeAnimationOneFace(downFaceValues, 0, edgeAnimation[frameNum][2]);
            // generate matrix of left face values
            generateEdgeAnimationOneFace(leftFaceValues, 1, edgeAnimation[frameNum][3]);

        }

        else if (faceNum == 2) { // right
            // generate matrix of up face values(18x18)
            generateEdgeAnimationOneFace(upFaceValues, 1, edgeAnimation[frameNum][0]);
            // generate matrix of front face values
            generateEdgeAnimationOneFace(frontFaceValues, 1, edgeAnimation[frameNum][1]);
            // generate matrix of down face values
            generateEdgeAnimationOneFace(downFaceValues, 1, edgeAnimation[frameNum][2]);
            // generate matrix of back face values
            generateEdgeAnimationOneFace(backFaceValues, 3, edgeAnimation[frameNum][3]);

        }
        
        else if (faceNum == 5) { // up
            // generate matrix of back face values
            generateEdgeAnimationOneFace(backFaceValues, 0, edgeAnimation[frameNum][0]);
            // generate matrix of right face values
            generateEdgeAnimationOneFace(rightFaceValues, 0, edgeAnimation[frameNum][1]);
            // generate matrix of front face values
            generateEdgeAnimationOneFace(frontFaceValues, 0, edgeAnimation[frameNum][2]);
            // generate matrix of left face values
            generateEdgeAnimationOneFace(leftFaceValues, 0, edgeAnimation[frameNum][3]);

        }

        else if (faceNum == 4) { // left
            // generate matrix of up face values
            generateEdgeAnimationOneFace(upFaceValues, 3, edgeAnimation[frameNum][0]);
            // generate matrix of front face values
            generateEdgeAnimationOneFace(frontFaceValues, 3, edgeAnimation[frameNum][1]);
            // generate matrix of down face values
            generateEdgeAnimationOneFace(downFaceValues, 3, edgeAnimation[frameNum][2]);
            // generate matrix of back face values
            generateEdgeAnimationOneFace(backFaceValues, 1, edgeAnimation[frameNum][3]);

        }

        else if (faceNum == 0) { // down
            // generate matrix of front face values
            generateEdgeAnimationOneFace(frontFaceValues, 2, edgeAnimation[frameNum][0]);
            // generate matrix of right face values
            generateEdgeAnimationOneFace(rightFaceValues, 2, edgeAnimation[frameNum][1]);
            // generate matrix of back face values
            generateEdgeAnimationOneFace(backFaceValues, 2, edgeAnimation[frameNum][2]);
            // generate matrix of left face values
            generateEdgeAnimationOneFace(leftFaceValues, 2, edgeAnimation[frameNum][3]);

        }
        
        else if (faceNum == 3) { // back
            // generate matrix of up face values
            generateEdgeAnimationOneFace(upFaceValues, 0, edgeAnimation[frameNum][0]);
            // generate matrix of left face values
            generateEdgeAnimationOneFace(leftFaceValues, 3, edgeAnimation[frameNum][1]);
            // generate matrix of down face values
            generateEdgeAnimationOneFace(downFaceValues, 2, edgeAnimation[frameNum][2]);
            // generate matrix of right face values
            generateEdgeAnimationOneFace(rightFaceValues, 1, edgeAnimation[frameNum][3]);

        }

        // take all of the face matrices and push to the cube



        // Push values to front
        for (int r=0; r<18; r++) {
            for (int c=0; c<18; c++) {
                index = (r * 18) + c;
                // originalEdgeColor will be a number from 10 to 21, representing the
                // original state of the edge colors.
                // We need to convert it to a number from 0 to 11 in order to index
                // the matrix of edge values to get those original colors.
                originalEdgeColor = edgeMatrix[originalEdgeColor - 10];
                if (originalEdgeColor == 1) { front.drawPixel(r, c, RED); }
                else if (originalEdgeColor == 2) { front.drawPixel(r, c, GREEN); }
                else if (originalEdgeColor == 3) { front.drawPixel(r, c, BLUE); }
                else if (originalEdgeColor == 4) { front.drawPixel(r, c, WHITE); }
                else if (originalEdgeColor == 5) { front.drawPixel(r, c, ORANGE); }
                else if (originalEdgeColor == 6) { front.drawPixel(r, c, YELLOW); }
            }
        }

        // Push values to right
        for (int r=0; r<18; r++) {
            for (int c=0; c<18; c++) {
                index = (r * 18) + c;
                originalEdgeColor = edgeMatrix[originalEdgeColor - 10];
                if (originalEdgeColor == 1) { right.drawPixel(r, c, RED); }
                else if (originalEdgeColor == 2) { right.drawPixel(r, c, GREEN); }
                else if (originalEdgeColor == 3) { right.drawPixel(r, c, BLUE); }
                else if (originalEdgeColor == 4) { right.drawPixel(r, c, WHITE); }
                else if (originalEdgeColor == 5) { right.drawPixel(r, c, ORANGE); }
                else if (originalEdgeColor == 6) { right.drawPixel(r, c, YELLOW); }
            }
        }

        // Push values to up
        for (int r=0; r<18; r++) {
            for (int c=0; c<18; c++) {
                index = (r * 18) + c;
                originalEdgeColor = edgeMatrix[originalEdgeColor - 10];
                if (originalEdgeColor == 1) { up.drawPixel(r, c, RED); }
                else if (originalEdgeColor == 2) { up.drawPixel(r, c, GREEN); }
                else if (originalEdgeColor == 3) { up.drawPixel(r, c, BLUE); }
                else if (originalEdgeColor == 4) { up.drawPixel(r, c, WHITE); }
                else if (originalEdgeColor == 5) { up.drawPixel(r, c, ORANGE); }
                else if (originalEdgeColor == 6) { up.drawPixel(r, c, YELLOW);}
            }
        }

        // Push values to left
        for (int r=0; r<18; r++) {
            for (int c=0; c<18; c++) {
                index = (r * 18) + c;
                originalEdgeColor = edgeMatrix[originalEdgeColor - 10];
                if (originalEdgeColor == 1) { left.drawPixel(r, c, RED); }
                else if (originalEdgeColor == 2) { left.drawPixel(r, c, GREEN); }
                else if (originalEdgeColor == 3) { left.drawPixel(r, c, BLUE); }
                else if (originalEdgeColor == 4) { left.drawPixel(r, c, WHITE); }
                else if (originalEdgeColor == 5) { left.drawPixel(r, c, ORANGE); }
                else if (originalEdgeColor == 6) { left.drawPixel(r, c, YELLOW); }
            }
        }

        // Push values to down
        for (int r=0; r<18; r++) {
            for (int c=0; c<18; c++) {
                index = (r * 18) + c;
                originalEdgeColor = edgeMatrix[originalEdgeColor - 10];
                if (originalEdgeColor == 1) { down.drawPixel(r, c, RED); }
                else if (originalEdgeColor == 2) { down.drawPixel(r, c, GREEN); }
                else if (originalEdgeColor == 3) { down.drawPixel(r, c, BLUE); }
                else if (originalEdgeColor == 4) { down.drawPixel(r, c, WHITE); }
                else if (originalEdgeColor == 5) { down.drawPixel(r, c, ORANGE); }
                else if (originalEdgeColor == 6) { down.drawPixel(r, c, YELLOW); }
            }
        }

        // Push values to back
        for (int r=0; r<18; r++) {
            for (int c=0; c<18; c++) {
                index = (r * 18) + c;
                originalEdgeColor = edgeMatrix[originalEdgeColor - 10];
                if (originalEdgeColor == 1) { back.drawPixel(r, c, RED); }
                else if (originalEdgeColor == 2) { back.drawPixel(r, c, GREEN); }
                else if (originalEdgeColor == 3) { back.drawPixel(r, c, BLUE); }
                else if (originalEdgeColor == 4) { back.drawPixel(r, c, WHITE); }
                else if (originalEdgeColor == 5) { back.drawPixel(r, c, ORANGE); }
                else if (originalEdgeColor == 6) { back.drawPixel(r, c, YELLOW); }
            }
        }



        // This part changes the FACE we're turning /////////////////////////////////////
        // Override the lights that might have been set when we changed the edges
        // Every light in the frame: 
        for (int lightNum=0; lightNum<324; lightNum++) {

            // This is a number (int) from 1-9
            originalPanelNumber = animationMatrix[frameNum][lightNum];

            // This is a number (char) from 1-6, represents the color of the light we're changing
            originalPanelColor = faceMatrix[originalPanelNumber - 1];

            if (originalPanelColor == 1) {
                face.setPixelColor(lightNum, RED_EXPANDED);
            } else if (originalPanelColor == 2) {
                face.setPixelColor(lightNum, GREEN_EXPANDED);         
            } else if (originalPanelColor == 3) {
                face.setPixelColor(lightNum, BLUE_EXPANDED);         
            } else if (originalPanelColor == 4) {
                face.setPixelColor(lightNum, WHITE_EXPANDED);         
            } else if (originalPanelColor == 5) {
                face.setPixelColor(lightNum, ORANGE_EXPANDED);         
            } else if (originalPanelColor == 6) {
                face.setPixelColor(lightNum, YELLOW_EXPANDED);         
            }
            else if (originalPanelColor == 0) {
                continue;
            }

        }



        // After showing all the faces of the frame, update the changes and wait
        front.show();
        right.show();
        up.show();
        left.show();
        down.show();
        back.show();

        delay(50);
        Serial.println("showed frame");
    }

}

void generateEdgeAnimationOneFace(int *matrixToEdit, int direction, int *edgeState) {
    
    if (direction == 0) { // The edges are on the top three panels
    
      /*
      ?????? ?????? ??????
      ?????? ?????? ??????
      ?????? ?????? ??????
      ?????? ?????? ??????
      ?????? ?????? ??????
      ?????? ?????? ??????
      
      000000 000000 000000
      000000 000000 000000
      000000 000000 000000
      Zeros all the way down
      */
      
      for (int i=0; i<18; i++) {
        // Edit matrixToEdit's top three panels with values from edgeState
        // 0 through 108
      
        matrixToEdit[i] = edgeState[i];
        matrixToEdit[i+18] = edgeState[i];
        matrixToEdit[i+36] = edgeState[i];
        matrixToEdit[i+54] = edgeState[i];
        matrixToEdit[i+72] = edgeState[i];
        matrixToEdit[i+90] = edgeState[i];
       
      }
        
    } else if (direction == 1) { // The edges are on the right three panels

      /*
      000000 000000 ??????
      000000 000000 ??????
      000000 000000 ??????
      ... repeat all the way down
      */

      for (int i=0; i<18; i++) {

        // i*18: row offset
        // Change items #12-17 of each row to all be the same thing
        matrixToEdit[(i*18) + 12] = edgeState[i];
        matrixToEdit[(i*18) + 13] = edgeState[i];
        matrixToEdit[(i*18) + 14] = edgeState[i];
        matrixToEdit[(i*18) + 15] = edgeState[i];
        matrixToEdit[(i*18) + 16] = edgeState[i];
        matrixToEdit[(i*18) + 17] = edgeState[i];

      }
    
    } else if (direction == 2) { // The edges are on the bottom three panels

      /*
      000000 000000 000000
      000000 000000 000000
      000000 000000 000000
      000000 000000 000000
      000000 000000 000000
      000000 000000 000000

      000000 000000 000000
      000000 000000 000000
      000000 000000 000000
      000000 000000 000000
      000000 000000 000000
      000000 000000 000000

      ?????? ?????? ??????
      ?????? ?????? ??????
      ?????? ?????? ??????
      ?????? ?????? ??????
      ?????? ?????? ??????
      ?????? ?????? ??????
      */
      
      // Reverse the order of the frames

      for (int i=0; i<18; i++) {

        // Edit matrixToEdit's bottom three panels with values from edgeState
        // 216 through 324

        matrixToEdit[i + 216] = edgeState[17 - i]; // 17-i flips the frames around
        matrixToEdit[i + 234] = edgeState[17 - i];
        matrixToEdit[i + 252] = edgeState[17 - i];
        matrixToEdit[i + 270] = edgeState[17 - i];
        matrixToEdit[i + 288] = edgeState[17 - i];
        matrixToEdit[i + 306] = edgeState[17 - i];



      }

    } else if (direction == 3) { // The edges are on the left three panels

      /*
      ?????? 000000 000000
      ?????? 000000 000000
      ?????? 000000 000000
      ?????? 000000 000000
      ?????? 000000 000000
      ?????? 000000 000000

      repeat all the way down
      */

      for (int i=0; i<18; i++) {


        // i*18: row offset
        // Change items #0-5 of each row to all be the same thing
        matrixToEdit[(i*18) + 0] = edgeState[17 - i]; // Reverse because we're on the left side
        matrixToEdit[(i*18) + 1] = edgeState[17 - i];
        matrixToEdit[(i*18) + 2] = edgeState[17 - i];
        matrixToEdit[(i*18) + 3] = edgeState[17 - i];
        matrixToEdit[(i*18) + 4] = edgeState[17 - i];
        matrixToEdit[(i*18) + 5] = edgeState[17 - i];

      }

    }

}

void getSerialData() {
     // Gets serial data and passes to the display function


    char notation[20];

    // Is there new serial data?
    if (Serial.available() > 0) {
        String receivedString = Serial.readString();
        receivedString.toCharArray(notation, receivedString.length());
        Serial.println(notation);
        displayCubeNotationAnimation(cubeState, notation); 
    }
}
